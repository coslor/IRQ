   1                   ;			
   2                   ;	test numerical macro routines			
   3                   ;			
   4                   .include "macros.asm"			
   1                   .ifndef constants
   2                   .include "const.asm"
   1                   constants=1			
   2                   
   3                   ;
   4                   ; utility routines
   5                   ;
   6                   CLR_SCREEN = $e544
   7                   PLOTK = $e50a			; read/set cursor row(x), col(y) 
   8                   SCROL = $e8ea			; scroll the screen up 1 line 
   9                   DSPP = $ea31			; read the screen & put char in A, color in X 
  10                   MOVE_UP = $a3bf			; move a block of memory up, or move memory  
  11                   						;	from one non-overlapping region to another.
  12                   						;	$5f-$60=source block starting address
  13                   						;	$5a-5b=source block ending address +1
  14                   						;	$58-59=destination's ending address +1
  15                   
  16                   
  17                   ;
  18                   ;	I/O ROUTINES
  19                   ;
  20                   CHROUT = $FFD2			; write byte to default output
  21                   CHRIN = $FFCF			; read byte from default input
  22                   
  23                   SETLFS = $FFBA			; set logical file numbers (open a,x,y)
  24                   SETNAM = $FFBD			; set file name(a=len,x/y=lo/hi for pointer)
  25                   OPEN = $FFC0			; open file (out:c=err, a=1,2,4,5,8 error code)
  26                   CLOSE = $FFC3			; close file (a=fileno)
  27                   CHKIN = $FFC6			; set file as default input(a=filenumber,C=error)
  28                   CHKOUT = $FFC9			; set file as default output(a=filenumber,C=error)
  29                   CLRCHN = $FFCC			; close default input/output files
  30                   LOAD = $FFD5
  31                   SAVE = $FFD8
  32                   GETIN = $FFE4			; read byte from default input (diff with CHRIN?)
  33                   CLALL = $FFE7			; clear file table & call CLRCHN
  34                   READST = $ffb7			; read STatus, leaves it in A
  35                   STATUS = $90			; ST for serial devices.						
  36                   						;	For serial devices:						
  37                   						;		bit 0:timeout (write)
  38                   						;		bit 1:timeout (read)
  39                   						;		bit 6:EOF
  40                   						;		bit 7:device not present 						
  41                   
  42                   STROUT = $ab1e			; print zt string,addr in A/Y
  43                   LINPRT = $BDCD			; print UNSIGNED int in A/X 
  44                   
  45                   PRTSPC = $ab4d			; print a space character
  46                   CRDO = $aad7			; print a CR character, followed by LF
  47                   						;	if channel > 128
  48                   						
  49                   STOP = $ffe1			; check for STOP key. If pressed, 
  50                   						; 	set Z (BEQ), call CLRCHN, print "break".
  51                   FTXTPTR = $7a			; pointer into (usually BASIC) text						
  52                   
  53                   ;
  54                   ;	FAC MATH
  55                   ;
  56                   MOVFA = $bbfc			; copy FAC2 to FAC1
  57                   						
  58                   FAC1 = $61				; $61:exponent (power of 2). 128 or greater means 
  59                   						;	negative exponent
  60                   						; $62-65:mantissa. Also, $62-63 hold result of
  61                   						;	FAC1-to-int conversions
  62                   						; $66:sign. 0=positive, $ff=negative
  63                   						
  64                   FAC2 = $69				; same structure as FAC1
  65                   
  66                   
  67                   AADD = $bd7e			; add A to FAC1
  68                   
  69                   ADDH = $b849			; add 0.5 to FAC1 for rounding
  70                   FSUBT = $b853			; FAC1=FAC2 - FAC1
  71                   FADDT = $b86f			; FAC1=FAC@ + FAC1
  72                   NEGFAC = $b947			; FAC1=negative (2's complement) of FAC1
  73                   FMULTT = $ba30			; FAC1=FAC1 * FAC2
  74                   FDIVT = $bb14			; FAC1=FAC2 / FAC1
  75                   ROUND = $bc2b			; FAC1 = ROUND(FAC1)
  76                   SIGN = $bc2b			; A=(0 if FAC1=0, 1 if FAC1>0, $FF(-1) otherwise)
  77                   						
  78                   FOUTIM = $be68			; convert TI to ASCII string at $100 
  79                   SQR = $bf71				; FAC1=SQR(FAC1) 
  80                   FPWRT = $bf78			; FAC1=FAC2^FAC1 
  81                   NEGOP = $bfb4			; FAC1 = NOT(FAC1) 
  82                   EXP = $bfed				; FAC1=e^EXP1 
  83                   RND = $e097				; FAC1=RND(FAC1), using BASIC's RND() logic 
  84                   COS = $e264				; FAC1=COS(FAC1) 
  85                   SIN = $e26b				; FAC1=SIN(FAC1) 
  86                   TAN = $e2b4				; FAC1=TAN(FAC1) 
  87                   ATN = $e30e				; FAC1=ATAN(FAC1) 
  88                   EVAL = $ae83			; evaluate an arithmetic term from ASCII  
  89                   						;	to a floating point value.   
  90                   
  91                   ;
  92                   ;	FAC CONVERSION ROUTINES
  93                   ;
  94                   PETSCII_TO_FAC1=$bcf3	; convert a PETSCII string containing 
  95                   						; 	a FP constant, to FAC1. before calling,  
  96                   						; 	store the address of the string in $7a/7b, 
  97                   						; 	then JSR $79.
  98                   						
  99                   STRVAL = $b7b5			; convert PETSCII-string to FAC1. Expects 
 100                   						;   string-address in $22/$23 and 
 101                   						;	length of string in accumulator.
 102                   						
 103                   GIVAYF = $b391			; convert signed int in Y/A to FAC1; range -32768 to 32767
 104                   FACINX = $B1AA			; convert FAC1 to 2-byte signed int in A/Y
 105                   FIN = $bfc3				; convert string (pointed to by TXTPTR) 
 106                   						;	to float in FAC1
 107                   FOUT = $bddd			; convert FAC1 to ASCII string, starting at $100
 108                   						; 	and ending with a 0 term. On exit, A/Y holds
 109                   						; 	start address, so STROUT can be called.
 110                   A_TO_FAC1 = $bc3c		; convert unsigned 8-bit int in A to FAC1						
 111                   SNGET = $b3a2  			; convert unsigned 8-bit int in Y to FAC1 
 112                   QINT = $bc9b			; convert FAC1 into 4-byte signed int from $62-65 
 113                   GETADR = $b7f7			; convert FAC1 to a 16-bit int, in $14/$15						
 114                    
 115                    
 116                   ;
 117                   ; interrupt vectors
 118                   ;
 119                   CVINV = $314			; point to IRQ handler, normally $ea31.
 120                   						;	NOTE: A,X,Y are saved on the stack before calling,
 121                   						;		but they are NOT automatically restored
 122                   						
 123                   CBINV = $316			; BRK interrupt handler. Normally $fe66.  
 124                   NMINV = $318			; NMI handler, normally $fe47.  
 125                   						;	NOTE: to disable RS/RESTORE, store a 0 in $318.
 126                   						
 127                   
 128                   						  						 
 129                   
 130                   ;
 131                   ; passing data between basic and ml
 132                   ;
 133                   
 134                   
 135                   A_STORAGE = $30c		; the registers are read from these 
 136                   X_STORAGE = $30d 		;	locations before running a SYS routine,
 137                   Y_STORAGE = $30e 		; 	and the results are stored back into 
 138                   P_STORAGE = $30f 		;	them after the RTS. doesn't apply to USR.
 139                   
 140                   USERADD = $311			; the 16-bit address of a USR routine can be 
 141                   						; 	put into this vector. for example:
 142                   						;		x=usr(17) 								
 143                   						;	...puts the value of 17 in FAC1, calls
 144                   						; 	the routine in $311-312, and assigns the
 145                   						;	value of FAC1 upon exiting, to the var x.
 146                   ;
 147                   ; other basic stuff
 148                   ;
 149                   CHRGET = $73			; reads the next character for processing by basic.
 150                   						;	sets P to indicate what kind of char,  
 151                   						; 	and returns the char in A. C=0-9,Z=end of stmt.
 152                   						
 153                   CHRGOT = $79			; does the same thing, but doesn't increment the						
 154                   						;	char pointer.						
 155                   												
 156                   VERCK = $A				; flag:0=LOAD,1=VERIFY												
 157                   VALTYP = $D				; flag:$FF=string,0=numeric							
 158                   INTFLG = $E				; flag:$80=int,0=fp												
 159                   INPFLG = $11			; flag:0=INPUT,$40=GET,$98=READ												
 160                   CHANNL = $13			; current logical file number (not dev#)												
 161                   TXTTAB = $2b			; beginning of BASIC text, normally $801 
 162                   MEMSIZ = $37			; end of BASIC-available memory 
 163                   CURLIN = $39			; current BASIC line#. $ff in $40 means immediate mode 
 164                   VARPNT = $47			; descriptor of current BASIC variable value 
 165                   OPMASK = $4D			; comparison operation flag: 1=<,2=> 
 166                   DSCPNT = $50			; $50-51 point to current string descriptor, 
 167                   						; 	$52 holds string length
 168                   						
 169                   ARISGN = $6f			; result of comparison between FAC1,FAC2						
 170                   						;	0=like signs, $ff=unlike signs						
 171                   
 172                   STKEY = $91				; value of the last row of the keybd when last scanned. 												 
 173                   						;	$ff=none,$fe=1,$fd=<-,$fb=CTRL,$ef=SPACE,
 174                   						;	$df=Commodore,$bf=Q,$7f=STOP.
 175                   						;	NOTE: this means that you can do this:
 176                   						;		LDA STKEY
 177                   						;		BPL handle_stop
 178                   						
 179                   VERCK2 = $93				; flag for load routine: 0=load/1=verify												
 180                   DFLTN = $99				; current default input device
 181                   DFLTO = $9A				; current default output device
 182                   TIME = $A0				; software jiffy clock, from $a0-a2. 
 183                   						;	24-bit count of jiffies (60/sec) since start.
 184                   						;	resets every 24 hours.
 185                   
 186                   FNLEN = $b7				; size of current filename						
 187                   LA = $b8				; current logical file number(for a different						
 188                   						;	purpose then $13)						
 189                   SA = $b9				; current secondary address												
 190                   FA = $ba				; current device number												
 191                   FNADR = $BB				; 2-byte pointer to filename												
 192                   LSTX = $c5				; matrix coordinate of *last* keypress; 64=none												
 193                   NDX = $c6				; # of characters in keyboard buffer												
 194                   RVS = $c7				; flag: print reverse characters? 0=no												
 195                   						;	NOTE: you can poke 0 here to cancel reverse mode												
 196                   SFDX = $cb				; matrix coords of *current* keypress; 64=none
 197                   BLNSW = $cc				; cursor blink enable:0=flash
 198                   GDBLN = $ce				; screen code of char under cursor
 199                   PNTR = $d3				; cursor column on current line
 200                   QTSW = $d4				; editor in quote mode? 0=no
 201                   TBLx = $d6				; current cursor physical line #
 202                   INSRT = $d8				; insert mode? >0 is # of inserts
 203                   USER = $f3				; 2-byte pointer to current screen color location
 204                   
 205                   COLOR = $286			; current foreground color for text
 206                   GDCOL = $287			; color of character under cursor
 207                   HIBASE = $288			; page of screen memory; normally contains 4(*256=1024)
 208                   						;	NOTE: $d018/$dd00 change ths *display*
 209                   						;	screen location - the one that shown onscreen.
 210                   						; 	this one is the memory written into by CHROUT,etc.
 211                   						
 212                   XMAX	= $289			; max keyvoard buffer size; should be <=10						
 213                   RPTFLAG = $28a			; flag: which keys should repeat?						
 214                   						;	0=normal,$80=all,$40=none						
 215                   												
 216                   SHFLAG = $653			; flag: modifier keys currently pressed?											
 217                   						;	bits: 1=SHIFT,2=Commodore,4=CTRL											
 218                   																	
 219                   MODE = $291				; flag: enable changing char sets with SHIFT/C= ?																	
 220                   						;	$80=disabled, 0=enabled																	
 221                   																							
 222                   AUTODN = $292			; flag: scroll screen on col 40/last line?																							
 223                   						;	0=yes; otherwise=no																							
 224                   																													
 225                   																													
 226                   																		 
 227                   BUF = $200				; BASIC line editor input buffer 
 228                    
 229                    												
 230                   ;
 231                   ; PETSCII
 232                   ;
 233                   SPC = $20
 234                   CR = $0d
 235                   RVS_ON = $12 
 236                   RVS_OFF = $92 
 237                   CLR = $93 
 238                   BLACK = $90
 239                   WHITE = $05
 240                   RED = $1c
 241                   GREEN = $1e
 242                   BLUE = $1f
 243                   ORANGE = $81
 244                   BROWN = $95
 245                   PURPLE = $9c
 246                   YELLOW = $9e
 247                   CYAN = $9f
 248                   LT_RED = $96
 249                   DK_GRAY = $97
 250                   GRAY = $98
 251                   LT_GRAY = $9b
 252                   LT_GREEN = $99
 253                   LT_BLUE = $9a
 254                   HOME = $13
 255                   DEL = $14
 256                   UP = $91
 257                   DOWN = $11
 258                   LEFT = $9d
 259                   RIGHT = $1d
 260                   SHIFT_ON = $09
 261                   SHIFT_OFF = $08
 262                   MODE_TEXT = $0e
 263                   MODE_GRAPH = $8e
 264                   F1 = $85
 265                   F2 = $86
 266                   F3 = $87
 267                   F4 = $88
 268                   F5 = $89
 269                   F6 = $8a
 270                   F7 = $8b
 271                   F8 = $8c 
 272                   DBL_QUOTE = $22 
 273                   SNGL_QUOTE = $27 
 274                   GRAPH_SLASH = $6e 
 275                   GRAPH_BACKSLASH = $6d 
 276                   PIPE = $7d 
 277                   DASH = $60 
 278                   
 279                   ;			
 280                   ; keyboard constants			
 281                   ;			
 282                   SHIFT_KEYS=$028d
 283                   KEY_SHIFT=%00000001
 284                   KEY_COMM=%000000010
 285                   KEY_CTRL=%00000100
 286                   
 287                   ;
 288                   ; zero page locations
 289                   ;
 290                   ; used by tape routines
 291                   ;
 292                   TSERVO = $92
 293                   TEOB = $96
 294                   TEMPXY = $97
 295                   TPARIT = $9b
 296                   TBYTFL = $9c
 297                   HDRTYP = $9e
 298                   PTR1 = $9e
 299                   PTR2 = $9f
 300                   TSFCNT = $a3
 301                   TBTCNT = $a4
 302                   CNTDN = $A5
 303                   BUFPNT = $a6
 304                   PASNUM = $a7
 305                   RIDATA = $aa
 306                   TCKS = $ab
 307                   CMP00 = $b0
 308                   CMPB01 = $b1
 309                   TAPE10 = $b2
 310                   TAPE11 = $b3
 311                   ;
 312                   ; used by rs-232
 313                   RIBUF0 = $f7
 314                   RIBUF1 = $f8
 315                   ROBUF0 = $f9
 316                   ROBUF1 = $fa
 317                   ;
 318                   ; unused
 319                   ;
 320                   MISC_PTR0 = $fb
 321                   MISC_PTR1 = $fc 
 322                   
 323                   ;
 324                   ; I/O Registers
 325                   ;
 326                   SPRITE0_X = $d000
 327                   SPRITE0_Y = $d001
 328                   SPRITE1_X = $d002
 329                   SPRITE1_Y = $d003
 330                   SPRITE2_X = $d004
 331                   SPRITE2_Y = $d005
 332                   SPRITE3_X = $d006
 333                   SPRITE3_Y = $d007
 334                   SPRITE4_X = $d008
 335                   SPRITE4_Y = $d009
 336                   SPRITE5_X = $d00a
 337                   SPRITE5_Y = $d00b
 338                   SPRITE6_X = $d00c
 339                   SPRITE6_Y = $d00d
 340                   SPRITE7_X = $d00e
 341                   SPRITE7_Y = $d00f
 342                   
 343                   SPRITE_MSB = $d010	; sprite 0-7 MSB of x coord
 344                   SCREEN_REG1= $d011	; bits 0-2:vertical raster roll
 345                   					; bit 3: screenm height (24/25 rows)
 346                   					; bit 4: screen off/on
 347                   					; bit 5: text/bitmap screen
 348                   					; bit 6: extended background mode
 349                   					; bit 7: 	read: current raster line
 350                   					;			write: line to generate IRQ at
 351                   					
 352                   RASTER_LINE = $d012 ; read: current raster line
 353                   LIGHTPEN_X = $d013
 354                   LIGHTPEN_Y = $d014
 355                   SPRITE_EN = $d015		; enable/disable bits for sprites 0-7
 356                   
 357                   SCREEN_CTRL = $d016	; 	bits 0-2:horiz raster scroll	
 358                   					;	bit 3: screen width - 38/40 cols	
 359                   					;	bit 4: multicolor mode	
 360                   						
 361                   SPRITE_2X_HT = $d017
 362                   MEM_SETUP = $d018	;	bits 1-3: in text mode, pointer to
 363                   					;		character memory
 364                   					; 	bits 4-7: pointer to screen memory
 365                   					
 366                   SPRITE_PRI = $d01b 	;	bits determine whether sprite x drawn  
 367                   					;		in front of/behind background
 368                   					
 369                   SPRITE_MULTI = $d01a ; sprites 0-7 multicolor on/off 
 370                   SPRITE_2X_WD = $d01d					
 371                   SPR2SPR_COLL = $d01e ; 	read: sprites have collided,					
 372                   					;	write: detect sprite-sprite collisions					
 373                   										
 374                   BORDER_COLOR = $d020 ; bits 0-3 										
 375                   BACKG_COLOR = $d021	; bits 0-3				
 376                   BKG_MULTI_CLR1 = $d022			
 377                   BKG_MULTI_CLR2 = $d023			
 378                   BKG_MULTI_CLR3 = $d024			
 379                   SPR_MULTI_CLR1 = $d025			
 380                   SPR_MULTI_CLR2 = $d026			
 381                   			
 382                   SPRITE0_COLOR = $d027 ; bits 0-3						
 383                   SPRITE1_COLOR = $d028 ; bits 0-3						
 384                   SPRITE2_COLOR = $d029 ; bits 0-3						
 385                   SPRITE3_COLOR = $d02a ; bits 0-3						
 386                   SPRITE4_COLOR = $d02b ; bits 0-3						
 387                   SPRITE5_COLOR = $d02c ; bits 0-3						
 388                   SPRITE6_COLOR = $d02d ; bits 0-3						
 389                   SPRITE7_COLOR = $d02e ; bits 0-3						
 390                   						
 391                   PROCESSOR_DDR = $0	; bits 0-7: set read/write for bit x 
 392                   					;	of processor port					
 393                   										
 394                   PROCESSOR_PORT = $1	; 	bit 0: RAM/ROM at $a000-bfff										
 395                   					;	bit 1: RAM/ROM at $e000-ffff										
 396                   					;	bit 2: RAM/IO ports at $d000-dfff										
 397                   					;	bits 3-5: datasette										
 398                   															
 399                   PRA  =  $dc00			; CIA#1 (Port Register A)
 400                   DDRA =  $dc02			; CIA#1 (Data Direction Register A)
 401                   
 402                   PRB  =  $dc01			; CIA#1 (Port Register B)
 403                   DDRB =  $dc03			; CIA#1 (Data Direction Register B)
 404                   
 405                   SCREEN_RAM = $400
 406                   COLOR_RAM = $d800
 407                   															  					
 408                   
   3                   .endif
   4                   
   5                   macros=1
   6                   
   7                   
   8                   push_axy	.macro
   9                   			pha
  10                   			txa
  11                   			pha
  12                   			tya
  13                   			pha
  14                   			.endm
  15                   
  16                   pull_axy	.macro						
  17                   			pla
  18                   			tay
  19                   			pla
  20                   			tax
  21                   			pla
  22                   			.endm			
  23                   ;
  24                   ;	"~" character prints as CR(13)
  25                   ;
  26                   print_str	.macro
  27                   			
  28                   			pha
  29                   			txa
  30                   			pha
  31                   			
  32                   			#print_str_addr rtxt
  33                   			
  34                   exit
  35                   			jmp end_text		
  36                   						
  37                   rtxt			.null "@1"
  38                   
  39                   end_text							
  40                   			pla						
  41                   			tax						
  42                   			pla						
  43                   									
  44                   			.endm
  45                   
  46                   print_str_addr .macro			
  47                   			ldx #0
  48                   			
  49                   loop			
  50                   			lda \1,x
  51                   			beq exit
  52                   			
  53                   			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54                   			bne print
  55                   			
  56                   			lda #CR
  57                   			
  58                   print			
  59                   			jsr CHROUT			
  60                   			inx			
  61                   			bne loop			
  62                   			.endm			
  63                   			
  64                   ;print_str_cr .segment			
  65                   ;			#print_str "@1"			
  66                   ;			#print_char 13			
  67                   ;			.endm			
  68                   						
  69                   
  70                   print_int	.macro
  71                   			pha
  72                   			tya
  73                   			pha
  74                   			
  75                   			lda #>\1
  76                   			ldy #<\1
  77                   			;jsr LINPRT
  78                   			#print_ay			
  79                   			
  80                   			pla
  81                   			tay
  82                   			pla
  83                   			.endm
  84                   
  85                   print_int_var .macro
  86                   			pha
  87                   			tya
  88                   			pha
  89                   			
  90                   			lda \1+1
  91                   			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
  94                   			
  95                   			pla
  96                   			tay
  97                   			pla
  98                   			.endm
  99                   
 100                   ; loads a,y with the value of the int pointed to 
 101                   ;	by 16-bit ptr \1
 102                   get_ptr_int	.macro
 103                   			
 104                   			ldy #0
 105                   			lda (\1),y
 106                   			
 107                   			pha
 108                   			iny
 109                   			lda (\1),y
 110                   			
 111                   			tax
 112                   			pla
 113                   			tay
 114                   			txa
 115                   
 116                   			.endm
 117                   ;
 118                   ; print a 16-bit int referenced by the
 119                   ;	zero-page 16-bit pointer starting at \1
 120                   ;
 121                   print_int_ptr .macro
 122                   			#push_axy			
 123                   			
 124                   			#get_ptr_int \1			
 125                   
 126                   			#print_ay
 127                   			
 128                   			#pull_axy
 129                   			.endm
 130                   
 131                   print_char_ptr .macro			
 132                   			#push_axy			
 133                   						
 134                   			ldy #0
 135                   			lda (\1),y						
 136                   									
 137                   			jsr CHROUT			
 138                   						
 139                   			#pull_axy			
 140                   			.endm			
 141                   						
 142                   ;
 143                   ; print a zt string referenced by the zero-page 
 144                   ;	16-bit pointer starting at \1
 145                   ;
 146                   print_str_ptr .macro
 147                   			#push_axy			
 148                   
 149                   			ldy #0
 150                   			
 151                   loop			
 152                   			lda (\1),y
 153                   			beq exit
 154                   			
 155                   			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
 156                   			bne print
 157                   			
 158                   			lda #CR
 159                   			
 160                   print			
 161                   			jsr CHROUT			
 162                   			iny			
 163                   			bne loop			
 164                   
 165                   ;finished						
 166                   ;			#pull_axy
 167                   ;			jmp exit
 168                   ;			
 169                   ;temp_a		.byte 00			
 170                   ;temp_y		.byte 00			
 171                   
 172                   exit		
 173                   			#pull_axy
 174                   			.endm
 175                   
 176                   ;
 177                   ;	
 178                   ;
 179                   print_ay	.macro
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183                   			jsr GIVAYF
 184                   			jsr FOUT
 185                   			jsr STROUT
 186                   			
 187                   			pull_axy
 188                   			.endm
 189                   			
 190                   
 191                   print_char	.macro
 192                   			pha	
 193                   				
 194                   			lda #\1
 195                   			jsr CHROUT
 196                   			
 197                   			pla
 198                   			.endm
 199                   			
 200                   print_spc	.macro			
 201                   			#print_char SPC			
 202                   			.endm			
 203                   						
 204                   print_cr	.macro						
 205                   			#print_char CR						
 206                   			.endm						
 207                   															
 208                   			
 209                   print_a		.macro
 210                   			
 211                   			sta temp
 212                   			txa
 213                   			pha
 214                   			
 215                   			lda temp
 216                   			#print_a_bare
 217                   			
 218                   			;jsr A_TO_FAC1
 219                   			;jsr FOUT
 220                   			;jsr STROUT
 221                   ;			pha
 222                   ;			tya
 223                   ;			pha
 224                   ;			
 225                   ;			lda temp
 226                   ;			ldy #0
 227                   ;			#print_ay
 228                   ;			
 229                   ;			pla
 230                   ;			tay
 231                   ;			pla
 232                   			
 233                   			pla
 234                   			tax
 235                   			lda temp	
 236                   			jmp exit	
 237                   				
 238                   temp		.byte 00				
 239                   
 240                   exit				
 241                   			.endm
 242                   
 243                   print_a_bare .macro			
 244                   			tax			
 245                   			lda #0
 246                   			
 247                   			jsr LINPRT
 248                   			
 249                   			.endm
 250                   			
 251                   			
 252                   print_byte	.macro
 253                   			pha
 254                   			txa
 255                   			pha
 256                   
 257                   			lda #\1
 258                   			
 259                   			#print_a_bare
 260                   			
 261                   			pla
 262                   			tax
 263                   			pla
 264                   			.endm
 265                   			
 266                   print_ptr	.macro
 267                   			
 268                   			pha
 269                   			tya
 270                   			pha
 271                   			
 272                   			lda \1+1
 273                   			ldy \1+2
 274                   			jsr LINPRT
 275                   			
 276                   			pla
 277                   			tay
 278                   			pla
 279                   			.endm
 280                   			
 281                   ;			
 282                   ;  increment a 16-bit value 
 283                   ; 			
 284                   inc16		.macro					
 285                   			;#print_str "inc16"					
 286                   								
 287                   ;			pha					
 288                   ;								
 289                   ;			clc
 290                   ;			lda \1					
 291                   ;			#print_str "inc16:a="					
 292                   ;			#print_a					
 293                   ;			#print_char 13					
 294                   ;			adc #1					
 295                   ;			#print_str "inc16:after inc, a="				
 296                   ;			#print_a				
 297                   ;			#print_char 13				
 298                   ;							
 299                   ;			sta \1					
 300                   ;			lda \2					
 301                   ;			adc #0					
 302                   ;			sta \2					
 303                   ;								
 304                   ;			pla								
 305                   											
 306                   			.ifdef DEBUG_MACROS								
 307                   				#print_str "inc16:before="								
 308                   				#print_int \1								
 309                   				#print_char CR								
 310                   			.endif								
 311                   											
 312                   			inc \1					
 313                   			bne done					
 314                   								
 315                   			inc \1+1					
 316                   								
 317                   								
 318                   done								
 319                   			.ifdef DEBUG_MACROS			
 320                   				#print_str "inc16:after="			
 321                   				#print_int \1			
 322                   				#print_char CR			
 323                   			.endif			
 324                   						
 325                   			.endm								
 326                   
 327                   ;											
 328                   ; store a 16-bit constant \2 in location \1											
 329                   ;	NOTE: does not save contents of A!											
 330                   ;											
 331                   store16		.macro											
 332                   														
 333                   			lda #<\1											
 334                   			sta \2											
 335                   														
 336                   			lda #>\1											
 337                   			sta \2+1											
 338                   														
 339                   			.endm											
 340                   
 341                   ;											
 342                   ; store the value of 16-bit var \2 in location \1											
 343                   ;	NOTE: does not save contents of A!											
 344                   ;											
 345                   store16var	.macro											
 346                   														
 347                   			lda \1											
 348                   			sta \2											
 349                   														
 350                   			lda \1+1											
 351                   			sta \2+1											
 352                   														
 353                   			.endm											
 354                   														
 355                   ;											
 356                   ; compare two 16-bit pointers. carry set if equal.											
 357                   ;	NOTE: doesn't save A											
 358                   ;											
 359                   cmp16vars	.macro						
 360                   			.ifdef DEBUG_MACROS						
 361                   				#print_str "cmp16:/1="						
 362                   				#print_int \1						
 363                   				#print_str " /2="						
 364                   				#print_int \2						
 365                   				#print_char SPC						
 366                   			.endif						
 367                   									
 368                   			clc						
 369                   									
 370                   			lda \1						
 371                   			cmp \2					
 372                   			bne exit					
 373                   								
 374                   			lda \1+1					
 375                   			cmp \2+1					
 376                   			bne exit					
 377                   								
 378                   			.ifdef DEBUG_MACROS					
 379                   				#print_str "EQUAL!"					
 380                   			.endif					
 381                   			sec					
 382                   								
 383                   exit																
 384                   			.ifdef DEBUG_MACROS															
 385                   				#print_char CR															
 386                   			.endif															
 387                   			.endm						
 388                   ;									
 389                   ; compare a 16-bit var to a constant									
 390                   ;									
 391                   cmp16const	.macro						
 392                   									
 393                   			clc						
 394                   									
 395                   			lda \1						
 396                   			cmp #<\2					
 397                   			bne exit					
 398                   								
 399                   			lda \1+1					
 400                   			cmp #>\2					
 401                   			bne exit					
 402                   								
 403                   			.ifdef DEBUG_MACROS					
 404                   				#print_str "EQUAL!"					
 405                   			.endif					
 406                   			sec					
 407                   								
 408                   exit																
 409                   			.ifdef DEBUG_MACROS															
 410                   				#print_char CR															
 411                   			.endif															
 412                   			.endm						
 413                   
 414                   ;									
 415                   ; 16-bit ints: \1 = \1+\2						
 416                   ;									
 417                   add16		.macro									
 418                   			clc									
 419                   												
 420                   			lda \1									
 421                   			adc \2									
 422                   			sta \1									
 423                   												
 424                   			lda \1+1
 425                   			adc \2+1
 426                   			sta \1+1
 427                   			
 428                   			clc
 429                   			.endm
 430                   			
 431                   			 									
 432                   
   5                   
   6                   *= $801
   7                   .block
   8 0801 0b 08 0a 00 
   9 0805 9e           .byte $9e
  10 0806 32 30 36 31  .null "2061"
     080a 00 
  11 080b 00 00        s .word 0
  12                   .bend
  13                   
  14                   number = 1777	
  15                   	
  16                   			#print_str "*** test macros ***~"
  27                   			
  28 080d 48           			pha
  29 080e 8a           			txa
  30 080f 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0810 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0812 bd 26 08     			lda \1,x
  51 0815 f0 0c        			beq exit
  52                   			
  53 0817 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0819 d0 02        			bne print
  55                   			
  56 081b a9 0d        			lda #CR
  57                   			
  58                   print			
  59 081d 20 d2 ff     			jsr CHROUT			
  60 0820 e8           			inx			
  61 0821 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0823 4c 3b 08     			jmp end_text		
  36                   						
  37 0826 2a 2a 2a 20  rtxt			.null "@1"
     082a 54 45 53 54 
     082e 20 4d 41 43 
     0832 52 4f 53 20 
     0836 2a 2a 2a 7e 
     083a 00 
  38                   
  39                   end_text							
  40 083b 68           			pla						
  41 083c aa           			tax						
  42 083d 68           			pla						
  43                   									
  17                   
  18                   			
  19                   			
  20                   			#print_cr
 205                   			#print_char CR						
 192 083e 48           			pha	
 193                   				
 194 083f a9 0d        			lda #\1
 195 0841 20 d2 ff     			jsr CHROUT
 196                   			
 197 0844 68           			pla
  21                   			
  22                   			#print_str "a(17):"
  27                   			
  28 0845 48           			pha
  29 0846 8a           			txa
  30 0847 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0848 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 084a bd 5e 08     			lda \1,x
  51 084d f0 0c        			beq exit
  52                   			
  53 084f c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0851 d0 02        			bne print
  55                   			
  56 0853 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0855 20 d2 ff     			jsr CHROUT			
  60 0858 e8           			inx			
  61 0859 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 085b 4c 65 08     			jmp end_text		
  36                   						
  37 085e 41 28 31 37  rtxt			.null "@1"
     0862 29 3a 00 
  38                   
  39                   end_text							
  40 0865 68           			pla						
  41 0866 aa           			tax						
  42 0867 68           			pla						
  43                   									
  23 0868 a9 11        			lda #17
  24                   			#print_a
 210                   			
 211 086a 8d 80 08     			sta temp
 212 086d 8a           			txa
 213 086e 48           			pha
 214                   			
 215 086f ad 80 08     			lda temp
 216                   			#print_a_bare
 244 0872 aa           			tax			
 245 0873 a9 00        			lda #0
 246                   			
 247 0875 20 cd bd     			jsr LINPRT
 248                   			
 217                   			
 218                   			;jsr A_TO_FAC1
 219                   			;jsr FOUT
 220                   			;jsr STROUT
 221                   ;			pha
 222                   ;			tya
 223                   ;			pha
 224                   ;			
 225                   ;			lda temp
 226                   ;			ldy #0
 227                   ;			#print_ay
 228                   ;			
 229                   ;			pla
 230                   ;			tay
 231                   ;			pla
 232                   			
 233 0878 68           			pla
 234 0879 aa           			tax
 235 087a ad 80 08     			lda temp	
 236 087d 4c 81 08     			jmp exit	
 237                   				
 238 0880 00           temp		.byte 00				
 239                   
 240                   exit				
  25                   			
  26                   			#print_str "~a(145):"
  27                   			
  28 0881 48           			pha
  29 0882 8a           			txa
  30 0883 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0884 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0886 bd 9a 08     			lda \1,x
  51 0889 f0 0c        			beq exit
  52                   			
  53 088b c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 088d d0 02        			bne print
  55                   			
  56 088f a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0891 20 d2 ff     			jsr CHROUT			
  60 0894 e8           			inx			
  61 0895 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0897 4c a3 08     			jmp end_text		
  36                   						
  37 089a 7e 41 28 31  rtxt			.null "@1"
     089e 34 35 29 3a 
     08a2 00 
  38                   
  39                   end_text							
  40 08a3 68           			pla						
  41 08a4 aa           			tax						
  42 08a5 68           			pla						
  43                   									
  27 08a6 a9 91        			lda #145
  28                   			#print_a
 210                   			
 211 08a8 8d be 08     			sta temp
 212 08ab 8a           			txa
 213 08ac 48           			pha
 214                   			
 215 08ad ad be 08     			lda temp
 216                   			#print_a_bare
 244 08b0 aa           			tax			
 245 08b1 a9 00        			lda #0
 246                   			
 247 08b3 20 cd bd     			jsr LINPRT
 248                   			
 217                   			
 218                   			;jsr A_TO_FAC1
 219                   			;jsr FOUT
 220                   			;jsr STROUT
 221                   ;			pha
 222                   ;			tya
 223                   ;			pha
 224                   ;			
 225                   ;			lda temp
 226                   ;			ldy #0
 227                   ;			#print_ay
 228                   ;			
 229                   ;			pla
 230                   ;			tay
 231                   ;			pla
 232                   			
 233 08b6 68           			pla
 234 08b7 aa           			tax
 235 08b8 ad be 08     			lda temp	
 236 08bb 4c bf 08     			jmp exit	
 237                   				
 238 08be 00           temp		.byte 00				
 239                   
 240                   exit				
  29                   			
  30                   			#print_str "~int(17):"
  27                   			
  28 08bf 48           			pha
  29 08c0 8a           			txa
  30 08c1 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 08c2 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 08c4 bd d8 08     			lda \1,x
  51 08c7 f0 0c        			beq exit
  52                   			
  53 08c9 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 08cb d0 02        			bne print
  55                   			
  56 08cd a9 0d        			lda #CR
  57                   			
  58                   print			
  59 08cf 20 d2 ff     			jsr CHROUT			
  60 08d2 e8           			inx			
  61 08d3 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 08d5 4c e2 08     			jmp end_text		
  36                   						
  37 08d8 7e 49 4e 54  rtxt			.null "@1"
     08dc 28 31 37 29 
     08e0 3a 00 
  38                   
  39                   end_text							
  40 08e2 68           			pla						
  41 08e3 aa           			tax						
  42 08e4 68           			pla						
  43                   									
  31                   			#print_int 17
  71 08e5 48           			pha
  72 08e6 98           			tya
  73 08e7 48           			pha
  74                   			
  75 08e8 a9 00        			lda #>\1
  76 08ea a0 11        			ldy #<\1
  77                   			;jsr LINPRT
  78                   			#print_ay			
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 08ec 20 91 b3     			jsr GIVAYF
 184 08ef 20 dd bd     			jsr FOUT
 185 08f2 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
  79                   			
  80 08f5 68           			pla
  81 08f6 a8           			tay
  82 08f7 68           			pla
  32                   			
  33                   			#print_str "~int(1707):"
  27                   			
  28 08f8 48           			pha
  29 08f9 8a           			txa
  30 08fa 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 08fb a2 00        			ldx #0
  48                   			
  49                   loop			
  50 08fd bd 11 09     			lda \1,x
  51 0900 f0 0c        			beq exit
  52                   			
  53 0902 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0904 d0 02        			bne print
  55                   			
  56 0906 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0908 20 d2 ff     			jsr CHROUT			
  60 090b e8           			inx			
  61 090c d0 ef        			bne loop			
  33                   			
  34                   exit
  35 090e 4c 1d 09     			jmp end_text		
  36                   						
  37 0911 7e 49 4e 54  rtxt			.null "@1"
     0915 28 31 37 30 
     0919 37 29 3a 00 
  38                   
  39                   end_text							
  40 091d 68           			pla						
  41 091e aa           			tax						
  42 091f 68           			pla						
  43                   									
  34                   			#print_int 1707
  71 0920 48           			pha
  72 0921 98           			tya
  73 0922 48           			pha
  74                   			
  75 0923 a9 06        			lda #>\1
  76 0925 a0 ab        			ldy #<\1
  77                   			;jsr LINPRT
  78                   			#print_ay			
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 0927 20 91 b3     			jsr GIVAYF
 184 092a 20 dd bd     			jsr FOUT
 185 092d 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
  79                   			
  80 0930 68           			pla
  81 0931 a8           			tay
  82 0932 68           			pla
  35                   			
  36                   			#print_str "~int(40000):"
  27                   			
  28 0933 48           			pha
  29 0934 8a           			txa
  30 0935 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0936 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0938 bd 4c 09     			lda \1,x
  51 093b f0 0c        			beq exit
  52                   			
  53 093d c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 093f d0 02        			bne print
  55                   			
  56 0941 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0943 20 d2 ff     			jsr CHROUT			
  60 0946 e8           			inx			
  61 0947 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0949 4c 59 09     			jmp end_text		
  36                   						
  37 094c 7e 49 4e 54  rtxt			.null "@1"
     0950 28 34 30 30 
     0954 30 30 29 3a 
     0958 00 
  38                   
  39                   end_text							
  40 0959 68           			pla						
  41 095a aa           			tax						
  42 095b 68           			pla						
  43                   									
  37                   			#print_int 40000
  71 095c 48           			pha
  72 095d 98           			tya
  73 095e 48           			pha
  74                   			
  75 095f a9 9c        			lda #>\1
  76 0961 a0 40        			ldy #<\1
  77                   			;jsr LINPRT
  78                   			#print_ay			
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 0963 20 91 b3     			jsr GIVAYF
 184 0966 20 dd bd     			jsr FOUT
 185 0969 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
  79                   			
  80 096c 68           			pla
  81 096d a8           			tay
  82 096e 68           			pla
  38                   			
  39                   
  40                   			#print_str "~byte(34):"
  27                   			
  28 096f 48           			pha
  29 0970 8a           			txa
  30 0971 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0972 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0974 bd 88 09     			lda \1,x
  51 0977 f0 0c        			beq exit
  52                   			
  53 0979 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 097b d0 02        			bne print
  55                   			
  56 097d a9 0d        			lda #CR
  57                   			
  58                   print			
  59 097f 20 d2 ff     			jsr CHROUT			
  60 0982 e8           			inx			
  61 0983 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0985 4c 93 09     			jmp end_text		
  36                   						
  37 0988 7e 42 59 54  rtxt			.null "@1"
     098c 45 28 33 34 
     0990 29 3a 00 
  38                   
  39                   end_text							
  40 0993 68           			pla						
  41 0994 aa           			tax						
  42 0995 68           			pla						
  43                   									
  41                   			#print_byte 34
 253 0996 48           			pha
 254 0997 8a           			txa
 255 0998 48           			pha
 256                   
 257 0999 a9 22        			lda #\1
 258                   			
 259                   			#print_a_bare
 244 099b aa           			tax			
 245 099c a9 00        			lda #0
 246                   			
 247 099e 20 cd bd     			jsr LINPRT
 248                   			
 260                   			
 261 09a1 68           			pla
 262 09a2 aa           			tax
 263 09a3 68           			pla
  42                   			
  43                   			#print_str "~byte(129):"
  27                   			
  28 09a4 48           			pha
  29 09a5 8a           			txa
  30 09a6 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 09a7 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 09a9 bd bd 09     			lda \1,x
  51 09ac f0 0c        			beq exit
  52                   			
  53 09ae c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 09b0 d0 02        			bne print
  55                   			
  56 09b2 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 09b4 20 d2 ff     			jsr CHROUT			
  60 09b7 e8           			inx			
  61 09b8 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 09ba 4c c9 09     			jmp end_text		
  36                   						
  37 09bd 7e 42 59 54  rtxt			.null "@1"
     09c1 45 28 31 32 
     09c5 39 29 3a 00 
  38                   
  39                   end_text							
  40 09c9 68           			pla						
  41 09ca aa           			tax						
  42 09cb 68           			pla						
  43                   									
  44                   			#print_byte 129
 253 09cc 48           			pha
 254 09cd 8a           			txa
 255 09ce 48           			pha
 256                   
 257 09cf a9 81        			lda #\1
 258                   			
 259                   			#print_a_bare
 244 09d1 aa           			tax			
 245 09d2 a9 00        			lda #0
 246                   			
 247 09d4 20 cd bd     			jsr LINPRT
 248                   			
 260                   			
 261 09d7 68           			pla
 262 09d8 aa           			tax
 263 09d9 68           			pla
  45                   			
  46                   						
  47                   			#print_str "~integer constant(1777):"
  27                   			
  28 09da 48           			pha
  29 09db 8a           			txa
  30 09dc 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 09dd a2 00        			ldx #0
  48                   			
  49                   loop			
  50 09df bd f3 09     			lda \1,x
  51 09e2 f0 0c        			beq exit
  52                   			
  53 09e4 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 09e6 d0 02        			bne print
  55                   			
  56 09e8 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 09ea 20 d2 ff     			jsr CHROUT			
  60 09ed e8           			inx			
  61 09ee d0 ef        			bne loop			
  33                   			
  34                   exit
  35 09f0 4c 0c 0a     			jmp end_text		
  36                   						
  37 09f3 7e 49 4e 54  rtxt			.null "@1"
     09f7 45 47 45 52 
     09fb 20 43 4f 4e 
     09ff 53 54 41 4e 
     0a03 54 28 31 37 
     0a07 37 37 29 3a 
     0a0b 00 
  38                   
  39                   end_text							
  40 0a0c 68           			pla						
  41 0a0d aa           			tax						
  42 0a0e 68           			pla						
  43                   									
  48                   			#print_int number
  71 0a0f 48           			pha
  72 0a10 98           			tya
  73 0a11 48           			pha
  74                   			
  75 0a12 a9 06        			lda #>\1
  76 0a14 a0 f1        			ldy #<\1
  77                   			;jsr LINPRT
  78                   			#print_ay			
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 0a16 20 91 b3     			jsr GIVAYF
 184 0a19 20 dd bd     			jsr FOUT
 185 0a1c 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
  79                   			
  80 0a1f 68           			pla
  81 0a20 a8           			tay
  82 0a21 68           			pla
  49                   			
  50                   			#print_str "~integer variable(1700):"						
  27                   			
  28 0a22 48           			pha
  29 0a23 8a           			txa
  30 0a24 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0a25 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0a27 bd 3b 0a     			lda \1,x
  51 0a2a f0 0c        			beq exit
  52                   			
  53 0a2c c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0a2e d0 02        			bne print
  55                   			
  56 0a30 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0a32 20 d2 ff     			jsr CHROUT			
  60 0a35 e8           			inx			
  61 0a36 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0a38 4c 54 0a     			jmp end_text		
  36                   						
  37 0a3b 7e 49 4e 54  rtxt			.null "@1"
     0a3f 45 47 45 52 
     0a43 20 56 41 52 
     0a47 49 41 42 4c 
     0a4b 45 28 31 37 
     0a4f 30 30 29 3a 
     0a53 00 
  38                   
  39                   end_text							
  40 0a54 68           			pla						
  41 0a55 aa           			tax						
  42 0a56 68           			pla						
  43                   									
  51                   			#print_int_var line_num
  86 0a57 48           			pha
  87 0a58 98           			tya
  88 0a59 48           			pha
  89                   			
  90 0a5a ad fd 0b     			lda \1+1
  91 0a5d ac fc 0b     			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 0a60 20 91 b3     			jsr GIVAYF
 184 0a63 20 dd bd     			jsr FOUT
 185 0a66 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0a69 68           			pla
  96 0a6a a8           			tay
  97 0a6b 68           			pla
  52                   
  53                   			#store16 variable,MISC_PTR0									
 332                   														
 333 0a6c a9 fe        			lda #<\1											
 334 0a6e 85 fb        			sta \2											
 335                   														
 336 0a70 a9 0b        			lda #>\1											
 337 0a72 85 fc        			sta \2+1											
 338                   														
  54                   			#print_str "~int pointer(1717):"
  27                   			
  28 0a74 48           			pha
  29 0a75 8a           			txa
  30 0a76 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0a77 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0a79 bd 8d 0a     			lda \1,x
  51 0a7c f0 0c        			beq exit
  52                   			
  53 0a7e c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0a80 d0 02        			bne print
  55                   			
  56 0a82 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0a84 20 d2 ff     			jsr CHROUT			
  60 0a87 e8           			inx			
  61 0a88 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0a8a 4c a1 0a     			jmp end_text		
  36                   						
  37 0a8d 7e 49 4e 54  rtxt			.null "@1"
     0a91 20 50 4f 49 
     0a95 4e 54 45 52 
     0a99 28 31 37 31 
     0a9d 37 29 3a 00 
  38                   
  39                   end_text							
  40 0aa1 68           			pla						
  41 0aa2 aa           			tax						
  42 0aa3 68           			pla						
  43                   									
  55                   			#print_int_ptr MISC_PTR0 
 122                   			#push_axy			
   9 0aa4 48           			pha
  10 0aa5 8a           			txa
  11 0aa6 48           			pha
  12 0aa7 98           			tya
  13 0aa8 48           			pha
 123                   			
 124                   			#get_ptr_int \1			
 103                   			
 104 0aa9 a0 00        			ldy #0
 105 0aab b1 fb        			lda (\1),y
 106                   			
 107 0aad 48           			pha
 108 0aae c8           			iny
 109 0aaf b1 fb        			lda (\1),y
 110                   			
 111 0ab1 aa           			tax
 112 0ab2 68           			pla
 113 0ab3 a8           			tay
 114 0ab4 8a           			txa
 115                   
 125                   
 126                   			#print_ay
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 0ab5 20 91 b3     			jsr GIVAYF
 184 0ab8 20 dd bd     			jsr FOUT
 185 0abb 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
 127                   			
 128                   			#pull_axy
  17 0abe 68           			pla
  18 0abf a8           			tay
  19 0ac0 68           			pla
  20 0ac1 aa           			tax
  21 0ac2 68           			pla
  56                   			#print_str "~location held in pointer:"			 
  27                   			
  28 0ac3 48           			pha
  29 0ac4 8a           			txa
  30 0ac5 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0ac6 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0ac8 bd dc 0a     			lda \1,x
  51 0acb f0 0c        			beq exit
  52                   			
  53 0acd c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0acf d0 02        			bne print
  55                   			
  56 0ad1 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0ad3 20 d2 ff     			jsr CHROUT			
  60 0ad6 e8           			inx			
  61 0ad7 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0ad9 4c f7 0a     			jmp end_text		
  36                   						
  37 0adc 7e 4c 4f 43  rtxt			.null "@1"
     0ae0 41 54 49 4f 
     0ae4 4e 20 48 45 
     0ae8 4c 44 20 49 
     0aec 4e 20 50 4f 
     0af0 49 4e 54 45 
     0af4 52 3a 00 
  38                   
  39                   end_text							
  40 0af7 68           			pla						
  41 0af8 aa           			tax						
  42 0af9 68           			pla						
  43                   									
  57                   			#print_int_var MISC_PTR0
  86 0afa 48           			pha
  87 0afb 98           			tya
  88 0afc 48           			pha
  89                   			
  90 0afd a5 fc        			lda \1+1
  91 0aff a4 fb        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 0b01 20 91 b3     			jsr GIVAYF
 184 0b04 20 dd bd     			jsr FOUT
 185 0b07 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0b0a 68           			pla
  96 0b0b a8           			tay
  97 0b0c 68           			pla
  58                   			#print_str "~location *of* pointer:"
  27                   			
  28 0b0d 48           			pha
  29 0b0e 8a           			txa
  30 0b0f 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0b10 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0b12 bd 26 0b     			lda \1,x
  51 0b15 f0 0c        			beq exit
  52                   			
  53 0b17 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0b19 d0 02        			bne print
  55                   			
  56 0b1b a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0b1d 20 d2 ff     			jsr CHROUT			
  60 0b20 e8           			inx			
  61 0b21 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0b23 4c 3e 0b     			jmp end_text		
  36                   						
  37 0b26 7e 4c 4f 43  rtxt			.null "@1"
     0b2a 41 54 49 4f 
     0b2e 4e 20 2a 4f 
     0b32 46 2a 20 50 
     0b36 4f 49 4e 54 
     0b3a 45 52 3a 00 
  38                   
  39                   end_text							
  40 0b3e 68           			pla						
  41 0b3f aa           			tax						
  42 0b40 68           			pla						
  43                   									
  59                   			#print_int MISC_PTR0
  71 0b41 48           			pha
  72 0b42 98           			tya
  73 0b43 48           			pha
  74                   			
  75 0b44 a9 00        			lda #>\1
  76 0b46 a0 fb        			ldy #<\1
  77                   			;jsr LINPRT
  78                   			#print_ay			
 180                   			push_axy
 181                   			
 182                   			;jsr LINPRT
 183 0b48 20 91 b3     			jsr GIVAYF
 184 0b4b 20 dd bd     			jsr FOUT
 185 0b4e 20 1e ab     			jsr STROUT
 186                   			
 187                   			pull_axy
  79                   			
  80 0b51 68           			pla
  81 0b52 a8           			tay
  82 0b53 68           			pla
  60                   			
  61                   			#print_str "~string pointer('seventeen'):"
  27                   			
  28 0b54 48           			pha
  29 0b55 8a           			txa
  30 0b56 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0b57 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0b59 bd 6d 0b     			lda \1,x
  51 0b5c f0 0c        			beq exit
  52                   			
  53 0b5e c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0b60 d0 02        			bne print
  55                   			
  56 0b62 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0b64 20 d2 ff     			jsr CHROUT			
  60 0b67 e8           			inx			
  61 0b68 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0b6a 4c 8b 0b     			jmp end_text		
  36                   						
  37 0b6d 7e 53 54 52  rtxt			.null "@1"
     0b71 49 4e 47 20 
     0b75 50 4f 49 4e 
     0b79 54 45 52 28 
     0b7d 27 53 45 56 
     0b81 45 4e 54 45 
     0b85 45 4e 27 29 
     0b89 3a 00 
  38                   
  39                   end_text							
  40 0b8b 68           			pla						
  41 0b8c aa           			tax						
  42 0b8d 68           			pla						
  43                   									
  62                   			#store16 str_var,MISC_PTR0
 332                   														
 333 0b8e a9 00        			lda #<\1											
 334 0b90 85 fb        			sta \2											
 335                   														
 336 0b92 a9 0c        			lda #>\1											
 337 0b94 85 fc        			sta \2+1											
 338                   														
  63                   			#print_str_ptr MISC_PTR0
 147                   			#push_axy			
   9 0b96 48           			pha
  10 0b97 8a           			txa
  11 0b98 48           			pha
  12 0b99 98           			tya
  13 0b9a 48           			pha
 148                   
 149 0b9b a0 00        			ldy #0
 150                   			
 151                   loop			
 152 0b9d b1 fb        			lda (\1),y
 153 0b9f f0 0c        			beq exit
 154                   			
 155 0ba1 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
 156 0ba3 d0 02        			bne print
 157                   			
 158 0ba5 a9 0d        			lda #CR
 159                   			
 160                   print			
 161 0ba7 20 d2 ff     			jsr CHROUT			
 162 0baa c8           			iny			
 163 0bab d0 f0        			bne loop			
 164                   
 165                   ;finished						
 166                   ;			#pull_axy
 167                   ;			jmp exit
 168                   ;			
 169                   ;temp_a		.byte 00			
 170                   ;temp_y		.byte 00			
 171                   
 172                   exit		
 173                   			#pull_axy
  17 0bad 68           			pla
  18 0bae a8           			tay
  19 0baf 68           			pla
  20 0bb0 aa           			tax
  21 0bb1 68           			pla
  64                   			
  65                   			#store16 test_char,MISC_PTR0
 332                   														
 333 0bb2 a9 0a        			lda #<\1											
 334 0bb4 85 fb        			sta \2											
 335                   														
 336 0bb6 a9 0c        			lda #>\1											
 337 0bb8 85 fc        			sta \2+1											
 338                   														
  66                   			#print_str "~char pointer('z'):"
  27                   			
  28 0bba 48           			pha
  29 0bbb 8a           			txa
  30 0bbc 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0bbd a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0bbf bd d3 0b     			lda \1,x
  51 0bc2 f0 0c        			beq exit
  52                   			
  53 0bc4 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0bc6 d0 02        			bne print
  55                   			
  56 0bc8 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0bca 20 d2 ff     			jsr CHROUT			
  60 0bcd e8           			inx			
  61 0bce d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0bd0 4c e7 0b     			jmp end_text		
  36                   						
  37 0bd3 7e 43 48 41  rtxt			.null "@1"
     0bd7 52 20 50 4f 
     0bdb 49 4e 54 45 
     0bdf 52 28 27 5a 
     0be3 27 29 3a 00 
  38                   
  39                   end_text							
  40 0be7 68           			pla						
  41 0be8 aa           			tax						
  42 0be9 68           			pla						
  43                   									
  67                   			#print_char_ptr MISC_PTR0
 132                   			#push_axy			
   9 0bea 48           			pha
  10 0beb 8a           			txa
  11 0bec 48           			pha
  12 0bed 98           			tya
  13 0bee 48           			pha
 133                   						
 134 0bef a0 00        			ldy #0
 135 0bf1 b1 fb        			lda (\1),y						
 136                   									
 137 0bf3 20 d2 ff     			jsr CHROUT			
 138                   						
 139                   			#pull_axy			
  17 0bf6 68           			pla
  18 0bf7 a8           			tay
  19 0bf8 68           			pla
  20 0bf9 aa           			tax
  21 0bfa 68           			pla
  68                   			
  69 0bfb 60           			rts
  70                   
  71 0bfc a4 06        line_num	.byte $a4, $06																																					
  72                   
  73 0bfe b5 06        variable	.word 1717																																					
  74 0c00 53 45 56 45  str_var		.null "seventeen"																																					
     0c04 4e 54 45 45 
     0c08 4e 00 
  75 0c0a 5a           test_char	.byte "z"																																					
  76                   																																					
  77                   																																					
  78                   
