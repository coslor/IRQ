   1                   ;        1         2         3         4         5         6         7
   2                   ;2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
   3                   
   4                   ;
   5                   ;	Fiddling around with IRQ vectors
   6                   ;
   7                   
   8                   .ifndef constants
   9                   	.include "const.asm"
   1                   constants=1			
   2                   
   3                   ;
   4                   ; utility routines
   5                   ;
   6                   CLR_SCREEN = $e544
   7                   PLOTK = $e50a			; read/set cursor row(x), col(y) 
   8                   SCROL = $e8ea			; scroll the screen up 1 line 
   9                   DSPP = $ea31			; read the screen & put char in A, color in X 
  10                   MOVE_UP = $a3bf			; move a block of memory up, or move memory  
  11                   						;	from one non-overlapping region to another.
  12                   						;	$5f-$60=source block starting address
  13                   						;	$5a-5b=source block ending address +1
  14                   						;	$58-59=destination's ending address +1
  15                   
  16                   
  17                   ;
  18                   ;	I/O ROUTINES
  19                   ;
  20                   CHROUT = $FFD2			; write byte to default output
  21                   CHRIN = $FFCF			; read byte from default input
  22                   
  23                   SETLFS = $FFBA			; set logical file numbers (open a,x,y)
  24                   SETNAM = $FFBD			; set file name(a=len,x/y=lo/hi for pointer)
  25                   OPEN = $FFC0			; open file (out:c=err, a=1,2,4,5,8 error code)
  26                   CLOSE = $FFC3			; close file (a=fileno)
  27                   CHKIN = $FFC6			; set file as default input(a=filenumber,C=error)
  28                   CHKOUT = $FFC9			; set file as default output(a=filenumber,C=error)
  29                   CLRCHN = $FFCC			; close default input/output files
  30                   LOAD = $FFD5
  31                   SAVE = $FFD8
  32                   GETIN = $FFE4			; read byte from default input (diff with CHRIN?)
  33                   CLALL = $FFE7			; clear file table & call CLRCHN
  34                   READST = $ffb7			; read STatus, leaves it in A
  35                   STATUS = $90			; ST for serial devices.						
  36                   						;	For serial devices:						
  37                   						;		bit 0:timeout (write)
  38                   						;		bit 1:timeout (read)
  39                   						;		bit 6:EOF
  40                   						;		bit 7:device not present 						
  41                   
  42                   STROUT = $ab1e			; print zt string,addr in A/Y
  43                   LINPRT = $BDCD			; print UNSIGNED int in A/X 
  44                   
  45                   PRTSPC = $ab4d			; print a space character
  46                   CRDO = $aad7			; print a CR character, followed by LF
  47                   						;	if channel > 128
  48                   						
  49                   STOP = $ffe1			; check for STOP key. If pressed, 
  50                   						; 	set Z (BEQ), call CLRCHN, print "break".
  51                   FTXTPTR = $7a			; pointer into (usually BASIC) text						
  52                   
  53                   ;
  54                   ;	FAC MATH
  55                   ;
  56                   MOVFA = $bbfc			; copy FAC2 to FAC1
  57                   						
  58                   FAC1 = $61				; $61:exponent (power of 2). 128 or greater means 
  59                   						;	negative exponent
  60                   						; $62-65:mantissa. Also, $62-63 hold result of
  61                   						;	FAC1-to-int conversions
  62                   						; $66:sign. 0=positive, $ff=negative
  63                   						
  64                   FAC2 = $69				; same structure as FAC1
  65                   
  66                   
  67                   AADD = $bd7e			; add A to FAC1
  68                   
  69                   ADDH = $b849			; add 0.5 to FAC1 for rounding
  70                   FSUBT = $b853			; FAC1=FAC2 - FAC1
  71                   FADDT = $b86f			; FAC1=FAC@ + FAC1
  72                   NEGFAC = $b947			; FAC1=negative (2's complement) of FAC1
  73                   FMULTT = $ba30			; FAC1=FAC1 * FAC2
  74                   FDIVT = $bb14			; FAC1=FAC2 / FAC1
  75                   ROUND = $bc2b			; FAC1 = ROUND(FAC1)
  76                   SIGN = $bc2b			; A=(0 if FAC1=0, 1 if FAC1>0, $FF(-1) otherwise)
  77                   						
  78                   FOUTIM = $be68			; convert TI to ASCII string at $100 
  79                   SQR = $bf71				; FAC1=SQR(FAC1) 
  80                   FPWRT = $bf78			; FAC1=FAC2^FAC1 
  81                   NEGOP = $bfb4			; FAC1 = NOT(FAC1) 
  82                   EXP = $bfed				; FAC1=e^EXP1 
  83                   RND = $e097				; FAC1=RND(FAC1), using BASIC's RND() logic 
  84                   COS = $e264				; FAC1=COS(FAC1) 
  85                   SIN = $e26b				; FAC1=SIN(FAC1) 
  86                   TAN = $e2b4				; FAC1=TAN(FAC1) 
  87                   ATN = $e30e				; FAC1=ATAN(FAC1) 
  88                   EVAL = $ae83			; evaluate an arithmetic term from ASCII  
  89                   						;	to a floating point value.   
  90                   
  91                   ;
  92                   ;	FAC CONVERSION ROUTINES
  93                   ;
  94                   PETSCII_TO_FAC1=$bcf3	; convert a PETSCII string containing 
  95                   						; 	a FP constant, to FAC1. before calling,  
  96                   						; 	store the address of the string in $7a/7b, 
  97                   						; 	then JSR $79.
  98                   						
  99                   STRVAL = $b7b5			; convert PETSCII-string to FAC1. Expects 
 100                   						;   string-address in $22/$23 and 
 101                   						;	length of string in accumulator.
 102                   						
 103                   GIVAYF = $b391			; convert signed int in Y/A to FAC1; range -32768 to 32767
 104                   FACINX = $B1AA			; convert FAC1 to 2-byte signed int in A/Y
 105                   FIN = $bfc3				; convert string (pointed to by TXTPTR) 
 106                   						;	to float in FAC1
 107                   FOUT = $bddd			; convert FAC1 to ASCII string, starting at $100
 108                   						; 	and ending with a 0 term. On exit, A/Y holds
 109                   						; 	start address, so STROUT can be called.
 110                   A_TO_FAC1 = $bc3c		; convert unsigned 8-bit int in A to FAC1						
 111                   SNGET = $b3a2  			; convert unsigned 8-bit int in Y to FAC1 
 112                   QINT = $bc9b			; convert FAC1 into 4-byte signed int from $62-65 
 113                   GETADR = $b7f7			; convert FAC1 to a 16-bit int, in $14/$15						
 114                    
 115                    
 116                   ;
 117                   ; interrupt vectors
 118                   ;
 119                   CVINV = $314			; point to IRQ handler, normally $ea31.
 120                   						;	NOTE: A,X,Y are saved on the stack before calling,
 121                   						;		but they are NOT automatically restored
 122                   						
 123                   CBINV = $316			; BRK interrupt handler. Normally $fe66.  
 124                   NMINV = $318			; NMI handler, normally $fe47.  
 125                   						;	NOTE: to disable RS/RESTORE, store a 0 in $318.
 126                   						
 127                   
 128                   						  						 
 129                   
 130                   ;
 131                   ; passing data between basic and ml
 132                   ;
 133                   
 134                   
 135                   A_STORAGE = $30c		; the registers are read from these 
 136                   X_STORAGE = $30d 		;	locations before running a SYS routine,
 137                   Y_STORAGE = $30e 		; 	and the results are stored back into 
 138                   P_STORAGE = $30f 		;	them after the RTS. doesn't apply to USR.
 139                   
 140                   USERADD = $311			; the 16-bit address of a USR routine can be 
 141                   						; 	put into this vector. for example:
 142                   						;		x=usr(17) 								
 143                   						;	...puts the value of 17 in FAC1, calls
 144                   						; 	the routine in $311-312, and assigns the
 145                   						;	value of FAC1 upon exiting, to the var x.
 146                   ;
 147                   ; other basic stuff
 148                   ;
 149                   CHRGET = $73			; reads the next character for processing by basic.
 150                   						;	sets P to indicate what kind of char,  
 151                   						; 	and returns the char in A. C=0-9,Z=end of stmt.
 152                   						
 153                   CHRGOT = $79			; does the same thing, but doesn't increment the						
 154                   						;	char pointer.						
 155                   												
 156                   VERCK = $A				; flag:0=LOAD,1=VERIFY												
 157                   VALTYP = $D				; flag:$FF=string,0=numeric							
 158                   INTFLG = $E				; flag:$80=int,0=fp												
 159                   INPFLG = $11			; flag:0=INPUT,$40=GET,$98=READ												
 160                   CHANNL = $13			; current logical file number (not dev#)												
 161                   TXTTAB = $2b			; beginning of BASIC text, normally $801 
 162                   MEMSIZ = $37			; end of BASIC-available memory 
 163                   CURLIN = $39			; current BASIC line#. $ff in $40 means immediate mode 
 164                   VARPNT = $47			; descriptor of current BASIC variable value 
 165                   OPMASK = $4D			; comparison operation flag: 1=<,2=> 
 166                   DSCPNT = $50			; $50-51 point to current string descriptor, 
 167                   						; 	$52 holds string length
 168                   						
 169                   ARISGN = $6f			; result of comparison between FAC1,FAC2						
 170                   						;	0=like signs, $ff=unlike signs						
 171                   
 172                   STKEY = $91				; value of the last row of the keybd when last scanned. 												 
 173                   						;	$ff=none,$fe=1,$fd=<-,$fb=CTRL,$ef=SPACE,
 174                   						;	$df=Commodore,$bf=Q,$7f=STOP.
 175                   						;	NOTE: this means that you can do this:
 176                   						;		LDA STKEY
 177                   						;		BPL handle_stop
 178                   						
 179                   VERCK2 = $93				; flag for load routine: 0=load/1=verify												
 180                   DFLTN = $99				; current default input device
 181                   DFLTO = $9A				; current default output device
 182                   TIME = $A0				; software jiffy clock, from $a0-a2. 
 183                   						;	24-bit count of jiffies (60/sec) since start.
 184                   						;	resets every 24 hours.
 185                   
 186                   FNLEN = $b7				; size of current filename						
 187                   LA = $b8				; current logical file number(for a different						
 188                   						;	purpose then $13)						
 189                   SA = $b9				; current secondary address												
 190                   FA = $ba				; current device number												
 191                   FNADR = $BB				; 2-byte pointer to filename												
 192                   LSTX = $c5				; matrix coordinate of *last* keypress; 64=none												
 193                   NDX = $c6				; # of characters in keyboard buffer												
 194                   RVS = $c7				; flag: print reverse characters? 0=no												
 195                   						;	NOTE: you can poke 0 here to cancel reverse mode												
 196                   SFDX = $cb				; matrix coords of *current* keypress; 64=none
 197                   BLNSW = $cc				; cursor blink enable:0=flash
 198                   GDBLN = $ce				; screen code of char under cursor
 199                   PNTR = $d3				; cursor column on current line
 200                   QTSW = $d4				; editor in quote mode? 0=no
 201                   TBLx = $d6				; current cursor physical line #
 202                   INSRT = $d8				; insert mode? >0 is # of inserts
 203                   USER = $f3				; 2-byte pointer to current screen color location
 204                   
 205                   COLOR = $286			; current foreground color for text
 206                   GDCOL = $287			; color of character under cursor
 207                   HIBASE = $288			; page of screen memory; normally contains 4(*256=1024)
 208                   						;	NOTE: $d018/$dd00 change ths *display*
 209                   						;	screen location - the one that shown onscreen.
 210                   						; 	this one is the memory written into by CHROUT,etc.
 211                   						
 212                   XMAX	= $289			; max keyvoard buffer size; should be <=10						
 213                   RPTFLAG = $28a			; flag: which keys should repeat?						
 214                   						;	0=normal,$80=all,$40=none						
 215                   												
 216                   SHFLAG = $653			; flag: modifier keys currently pressed?											
 217                   						;	bits: 1=SHIFT,2=Commodore,4=CTRL											
 218                   																	
 219                   MODE = $291				; flag: enable changing char sets with SHIFT/C= ?																	
 220                   						;	$80=disabled, 0=enabled																	
 221                   																							
 222                   AUTODN = $292			; flag: scroll screen on col 40/last line?																							
 223                   						;	0=yes; otherwise=no																							
 224                   																													
 225                   																													
 226                   																		 
 227                   BUF = $200				; BASIC line editor input buffer 
 228                    
 229                    												
 230                   ;
 231                   ; PETSCII
 232                   ;
 233                   SPC = $20
 234                   CR = $0d
 235                   RVS_ON = $12 
 236                   RVS_OFF = $92 
 237                   CLR = $93 
 238                   BLACK = $90
 239                   WHITE = $05
 240                   RED = $1c
 241                   GREEN = $1e
 242                   BLUE = $1f
 243                   ORANGE = $81
 244                   BROWN = $95
 245                   PURPLE = $9c
 246                   YELLOW = $9e
 247                   CYAN = $9f
 248                   LT_RED = $96
 249                   DK_GRAY = $97
 250                   GRAY = $98
 251                   LT_GRAY = $9b
 252                   LT_GREEN = $99
 253                   LT_BLUE = $9a
 254                   HOME = $13
 255                   DEL = $14
 256                   UP = $91
 257                   DOWN = $11
 258                   LEFT = $9d
 259                   RIGHT = $1d
 260                   SHIFT_ON = $09
 261                   SHIFT_OFF = $08
 262                   MODE_TEXT = $0e
 263                   MODE_GRAPH = $8e
 264                   F1 = $85
 265                   F2 = $86
 266                   F3 = $87
 267                   F4 = $88
 268                   F5 = $89
 269                   F6 = $8a
 270                   F7 = $8b
 271                   F8 = $8c 
 272                   DBL_QUOTE = $22 
 273                   SNGL_QUOTE = $27 
 274                   GRAPH_SLASH = $6e 
 275                   GRAPH_BACKSLASH = $6d 
 276                   PIPE = $7d 
 277                   DASH = $60 
 278                   
 279                   ;			
 280                   ; keyboard constants			
 281                   ;			
 282                   SHIFT_KEYS=$028d
 283                   KEY_SHIFT=%00000001
 284                   KEY_COMM=%000000010
 285                   KEY_CTRL=%00000100
 286                   
 287                   ;
 288                   ; zero page locations
 289                   ;
 290                   ; used by tape routines
 291                   ;
 292                   TSERVO = $92
 293                   TEOB = $96
 294                   TEMPXY = $97
 295                   TPARIT = $9b
 296                   TBYTFL = $9c
 297                   HDRTYP = $9e
 298                   PTR1 = $9e
 299                   PTR2 = $9f
 300                   TSFCNT = $a3
 301                   TBTCNT = $a4
 302                   CNTDN = $A5
 303                   BUFPNT = $a6
 304                   PASNUM = $a7
 305                   RIDATA = $aa
 306                   TCKS = $ab
 307                   CMP00 = $b0
 308                   CMPB01 = $b1
 309                   TAPE10 = $b2
 310                   TAPE11 = $b3
 311                   ;
 312                   ; used by rs-232
 313                   RIBUF0 = $f7
 314                   RIBUF1 = $f8
 315                   ROBUF0 = $f9
 316                   ROBUF1 = $fa
 317                   ;
 318                   ; unused
 319                   ;
 320                   MISC_PTR0 = $fb
 321                   MISC_PTR1 = $fc 
 322                   
 323                   ;
 324                   ; I/O Registers
 325                   ;
 326                   SPRITE0_X = $d000
 327                   SPRITE0_Y = $d001
 328                   SPRITE1_X = $d002
 329                   SPRITE1_Y = $d003
 330                   SPRITE2_X = $d004
 331                   SPRITE2_Y = $d005
 332                   SPRITE3_X = $d006
 333                   SPRITE3_Y = $d007
 334                   SPRITE4_X = $d008
 335                   SPRITE4_Y = $d009
 336                   SPRITE5_X = $d00a
 337                   SPRITE5_Y = $d00b
 338                   SPRITE6_X = $d00c
 339                   SPRITE6_Y = $d00d
 340                   SPRITE7_X = $d00e
 341                   SPRITE7_Y = $d00f
 342                   
 343                   SPRITE_MSB = $d010	; sprite 0-7 MSB of x coord
 344                   SCREEN_REG1= $d011	; bits 0-2:vertical raster roll
 345                   					; bit 3: screenm height (24/25 rows)
 346                   					; bit 4: screen off/on
 347                   					; bit 5: text/bitmap screen
 348                   					; bit 6: extended background mode
 349                   					; bit 7: 	read: current raster line
 350                   					;			write: line to generate IRQ at
 351                   					
 352                   RASTER_LINE = $d012 ; read: current raster line
 353                   LIGHTPEN_X = $d013
 354                   LIGHTPEN_Y = $d014
 355                   SPRITE_EN = $d015		; enable/disable bits for sprites 0-7
 356                   
 357                   SCREEN_CTRL = $d016	; 	bits 0-2:horiz raster scroll	
 358                   					;	bit 3: screen width - 38/40 cols	
 359                   					;	bit 4: multicolor mode	
 360                   						
 361                   SPRITE_2X_HT = $d017
 362                   MEM_SETUP = $d018	;	bits 1-3: in text mode, pointer to
 363                   					;		character memory
 364                   					; 	bits 4-7: pointer to screen memory
 365                   					
 366                   SPRITE_PRI = $d01b 	;	bits determine whether sprite x drawn  
 367                   					;		in front of/behind background
 368                   					
 369                   SPRITE_MULTI = $d01a ; sprites 0-7 multicolor on/off 
 370                   SPRITE_2X_WD = $d01d					
 371                   SPR2SPR_COLL = $d01e ; 	read: sprites have collided,					
 372                   					;	write: detect sprite-sprite collisions					
 373                   										
 374                   BORDER_COLOR = $d020 ; bits 0-3 										
 375                   BACKG_COLOR = $d021	; bits 0-3				
 376                   BKG_MULTI_CLR1 = $d022			
 377                   BKG_MULTI_CLR2 = $d023			
 378                   BKG_MULTI_CLR3 = $d024			
 379                   SPR_MULTI_CLR1 = $d025			
 380                   SPR_MULTI_CLR2 = $d026			
 381                   			
 382                   SPRITE0_COLOR = $d027 ; bits 0-3						
 383                   SPRITE1_COLOR = $d028 ; bits 0-3						
 384                   SPRITE2_COLOR = $d029 ; bits 0-3						
 385                   SPRITE3_COLOR = $d02a ; bits 0-3						
 386                   SPRITE4_COLOR = $d02b ; bits 0-3						
 387                   SPRITE5_COLOR = $d02c ; bits 0-3						
 388                   SPRITE6_COLOR = $d02d ; bits 0-3						
 389                   SPRITE7_COLOR = $d02e ; bits 0-3						
 390                   						
 391                   PROCESSOR_DDR = $0	; bits 0-7: set read/write for bit x 
 392                   					;	of processor port					
 393                   										
 394                   PROCESSOR_PORT = $1	; 	bit 0: RAM/ROM at $a000-bfff										
 395                   					;	bit 1: RAM/ROM at $e000-ffff										
 396                   					;	bit 2: RAM/IO ports at $d000-dfff										
 397                   					;	bits 3-5: datasette										
 398                   															
 399                   PRA  =  $dc00			; CIA#1 (Port Register A)
 400                   DDRA =  $dc02			; CIA#1 (Data Direction Register A)
 401                   
 402                   PRB  =  $dc01			; CIA#1 (Port Register B)
 403                   DDRB =  $dc03			; CIA#1 (Data Direction Register B)
 404                   
 405                   SCREEN_RAM = $400
 406                   COLOR_RAM = $d800
 407                   															  					
 408                   
  10                   .endif
  11                   .ifndef macros
  12                   	.include "macros.asm"
   1                   .ifndef constants
   2                   .include "const.asm"
   1                   constants=1			
   2                   
   3                   ;
   4                   ; utility routines
   5                   ;
   6                   CLR_SCREEN = $e544
   7                   PLOTK = $e50a			; read/set cursor row(x), col(y) 
   8                   SCROL = $e8ea			; scroll the screen up 1 line 
   9                   DSPP = $ea31			; read the screen & put char in A, color in X 
  10                   MOVE_UP = $a3bf			; move a block of memory up, or move memory  
  11                   						;	from one non-overlapping region to another.
  12                   						;	$5f-$60=source block starting address
  13                   						;	$5a-5b=source block ending address +1
  14                   						;	$58-59=destination's ending address +1
  15                   
  16                   
  17                   ;
  18                   ;	I/O ROUTINES
  19                   ;
  20                   CHROUT = $FFD2			; write byte to default output
  21                   CHRIN = $FFCF			; read byte from default input
  22                   
  23                   SETLFS = $FFBA			; set logical file numbers (open a,x,y)
  24                   SETNAM = $FFBD			; set file name(a=len,x/y=lo/hi for pointer)
  25                   OPEN = $FFC0			; open file (out:c=err, a=1,2,4,5,8 error code)
  26                   CLOSE = $FFC3			; close file (a=fileno)
  27                   CHKIN = $FFC6			; set file as default input(a=filenumber,C=error)
  28                   CHKOUT = $FFC9			; set file as default output(a=filenumber,C=error)
  29                   CLRCHN = $FFCC			; close default input/output files
  30                   LOAD = $FFD5
  31                   SAVE = $FFD8
  32                   GETIN = $FFE4			; read byte from default input (diff with CHRIN?)
  33                   CLALL = $FFE7			; clear file table & call CLRCHN
  34                   READST = $ffb7			; read STatus, leaves it in A
  35                   STATUS = $90			; ST for serial devices.						
  36                   						;	For serial devices:						
  37                   						;		bit 0:timeout (write)
  38                   						;		bit 1:timeout (read)
  39                   						;		bit 6:EOF
  40                   						;		bit 7:device not present 						
  41                   
  42                   STROUT = $ab1e			; print zt string,addr in A/Y
  43                   LINPRT = $BDCD			; print UNSIGNED int in A/X 
  44                   
  45                   PRTSPC = $ab4d			; print a space character
  46                   CRDO = $aad7			; print a CR character, followed by LF
  47                   						;	if channel > 128
  48                   						
  49                   STOP = $ffe1			; check for STOP key. If pressed, 
  50                   						; 	set Z (BEQ), call CLRCHN, print "break".
  51                   FTXTPTR = $7a			; pointer into (usually BASIC) text						
  52                   
  53                   ;
  54                   ;	FAC MATH
  55                   ;
  56                   MOVFA = $bbfc			; copy FAC2 to FAC1
  57                   						
  58                   FAC1 = $61				; $61:exponent (power of 2). 128 or greater means 
  59                   						;	negative exponent
  60                   						; $62-65:mantissa. Also, $62-63 hold result of
  61                   						;	FAC1-to-int conversions
  62                   						; $66:sign. 0=positive, $ff=negative
  63                   						
  64                   FAC2 = $69				; same structure as FAC1
  65                   
  66                   
  67                   AADD = $bd7e			; add A to FAC1
  68                   
  69                   ADDH = $b849			; add 0.5 to FAC1 for rounding
  70                   FSUBT = $b853			; FAC1=FAC2 - FAC1
  71                   FADDT = $b86f			; FAC1=FAC@ + FAC1
  72                   NEGFAC = $b947			; FAC1=negative (2's complement) of FAC1
  73                   FMULTT = $ba30			; FAC1=FAC1 * FAC2
  74                   FDIVT = $bb14			; FAC1=FAC2 / FAC1
  75                   ROUND = $bc2b			; FAC1 = ROUND(FAC1)
  76                   SIGN = $bc2b			; A=(0 if FAC1=0, 1 if FAC1>0, $FF(-1) otherwise)
  77                   						
  78                   FOUTIM = $be68			; convert TI to ASCII string at $100 
  79                   SQR = $bf71				; FAC1=SQR(FAC1) 
  80                   FPWRT = $bf78			; FAC1=FAC2^FAC1 
  81                   NEGOP = $bfb4			; FAC1 = NOT(FAC1) 
  82                   EXP = $bfed				; FAC1=e^EXP1 
  83                   RND = $e097				; FAC1=RND(FAC1), using BASIC's RND() logic 
  84                   COS = $e264				; FAC1=COS(FAC1) 
  85                   SIN = $e26b				; FAC1=SIN(FAC1) 
  86                   TAN = $e2b4				; FAC1=TAN(FAC1) 
  87                   ATN = $e30e				; FAC1=ATAN(FAC1) 
  88                   EVAL = $ae83			; evaluate an arithmetic term from ASCII  
  89                   						;	to a floating point value.   
  90                   
  91                   ;
  92                   ;	FAC CONVERSION ROUTINES
  93                   ;
  94                   PETSCII_TO_FAC1=$bcf3	; convert a PETSCII string containing 
  95                   						; 	a FP constant, to FAC1. before calling,  
  96                   						; 	store the address of the string in $7a/7b, 
  97                   						; 	then JSR $79.
  98                   						
  99                   STRVAL = $b7b5			; convert PETSCII-string to FAC1. Expects 
 100                   						;   string-address in $22/$23 and 
 101                   						;	length of string in accumulator.
 102                   						
 103                   GIVAYF = $b391			; convert signed int in Y/A to FAC1; range -32768 to 32767
 104                   FACINX = $B1AA			; convert FAC1 to 2-byte signed int in A/Y
 105                   FIN = $bfc3				; convert string (pointed to by TXTPTR) 
 106                   						;	to float in FAC1
 107                   FOUT = $bddd			; convert FAC1 to ASCII string, starting at $100
 108                   						; 	and ending with a 0 term. On exit, A/Y holds
 109                   						; 	start address, so STROUT can be called.
 110                   A_TO_FAC1 = $bc3c		; convert unsigned 8-bit int in A to FAC1						
 111                   SNGET = $b3a2  			; convert unsigned 8-bit int in Y to FAC1 
 112                   QINT = $bc9b			; convert FAC1 into 4-byte signed int from $62-65 
 113                   GETADR = $b7f7			; convert FAC1 to a 16-bit int, in $14/$15						
 114                    
 115                    
 116                   ;
 117                   ; interrupt vectors
 118                   ;
 119                   CVINV = $314			; point to IRQ handler, normally $ea31.
 120                   						;	NOTE: A,X,Y are saved on the stack before calling,
 121                   						;		but they are NOT automatically restored
 122                   						
 123                   CBINV = $316			; BRK interrupt handler. Normally $fe66.  
 124                   NMINV = $318			; NMI handler, normally $fe47.  
 125                   						;	NOTE: to disable RS/RESTORE, store a 0 in $318.
 126                   						
 127                   
 128                   						  						 
 129                   
 130                   ;
 131                   ; passing data between basic and ml
 132                   ;
 133                   
 134                   
 135                   A_STORAGE = $30c		; the registers are read from these 
 136                   X_STORAGE = $30d 		;	locations before running a SYS routine,
 137                   Y_STORAGE = $30e 		; 	and the results are stored back into 
 138                   P_STORAGE = $30f 		;	them after the RTS. doesn't apply to USR.
 139                   
 140                   USERADD = $311			; the 16-bit address of a USR routine can be 
 141                   						; 	put into this vector. for example:
 142                   						;		x=usr(17) 								
 143                   						;	...puts the value of 17 in FAC1, calls
 144                   						; 	the routine in $311-312, and assigns the
 145                   						;	value of FAC1 upon exiting, to the var x.
 146                   ;
 147                   ; other basic stuff
 148                   ;
 149                   CHRGET = $73			; reads the next character for processing by basic.
 150                   						;	sets P to indicate what kind of char,  
 151                   						; 	and returns the char in A. C=0-9,Z=end of stmt.
 152                   						
 153                   CHRGOT = $79			; does the same thing, but doesn't increment the						
 154                   						;	char pointer.						
 155                   												
 156                   VERCK = $A				; flag:0=LOAD,1=VERIFY												
 157                   VALTYP = $D				; flag:$FF=string,0=numeric							
 158                   INTFLG = $E				; flag:$80=int,0=fp												
 159                   INPFLG = $11			; flag:0=INPUT,$40=GET,$98=READ												
 160                   CHANNL = $13			; current logical file number (not dev#)												
 161                   TXTTAB = $2b			; beginning of BASIC text, normally $801 
 162                   MEMSIZ = $37			; end of BASIC-available memory 
 163                   CURLIN = $39			; current BASIC line#. $ff in $40 means immediate mode 
 164                   VARPNT = $47			; descriptor of current BASIC variable value 
 165                   OPMASK = $4D			; comparison operation flag: 1=<,2=> 
 166                   DSCPNT = $50			; $50-51 point to current string descriptor, 
 167                   						; 	$52 holds string length
 168                   						
 169                   ARISGN = $6f			; result of comparison between FAC1,FAC2						
 170                   						;	0=like signs, $ff=unlike signs						
 171                   
 172                   STKEY = $91				; value of the last row of the keybd when last scanned. 												 
 173                   						;	$ff=none,$fe=1,$fd=<-,$fb=CTRL,$ef=SPACE,
 174                   						;	$df=Commodore,$bf=Q,$7f=STOP.
 175                   						;	NOTE: this means that you can do this:
 176                   						;		LDA STKEY
 177                   						;		BPL handle_stop
 178                   						
 179                   VERCK2 = $93				; flag for load routine: 0=load/1=verify												
 180                   DFLTN = $99				; current default input device
 181                   DFLTO = $9A				; current default output device
 182                   TIME = $A0				; software jiffy clock, from $a0-a2. 
 183                   						;	24-bit count of jiffies (60/sec) since start.
 184                   						;	resets every 24 hours.
 185                   
 186                   FNLEN = $b7				; size of current filename						
 187                   LA = $b8				; current logical file number(for a different						
 188                   						;	purpose then $13)						
 189                   SA = $b9				; current secondary address												
 190                   FA = $ba				; current device number												
 191                   FNADR = $BB				; 2-byte pointer to filename												
 192                   LSTX = $c5				; matrix coordinate of *last* keypress; 64=none												
 193                   NDX = $c6				; # of characters in keyboard buffer												
 194                   RVS = $c7				; flag: print reverse characters? 0=no												
 195                   						;	NOTE: you can poke 0 here to cancel reverse mode												
 196                   SFDX = $cb				; matrix coords of *current* keypress; 64=none
 197                   BLNSW = $cc				; cursor blink enable:0=flash
 198                   GDBLN = $ce				; screen code of char under cursor
 199                   PNTR = $d3				; cursor column on current line
 200                   QTSW = $d4				; editor in quote mode? 0=no
 201                   TBLx = $d6				; current cursor physical line #
 202                   INSRT = $d8				; insert mode? >0 is # of inserts
 203                   USER = $f3				; 2-byte pointer to current screen color location
 204                   
 205                   COLOR = $286			; current foreground color for text
 206                   GDCOL = $287			; color of character under cursor
 207                   HIBASE = $288			; page of screen memory; normally contains 4(*256=1024)
 208                   						;	NOTE: $d018/$dd00 change ths *display*
 209                   						;	screen location - the one that shown onscreen.
 210                   						; 	this one is the memory written into by CHROUT,etc.
 211                   						
 212                   XMAX	= $289			; max keyvoard buffer size; should be <=10						
 213                   RPTFLAG = $28a			; flag: which keys should repeat?						
 214                   						;	0=normal,$80=all,$40=none						
 215                   												
 216                   SHFLAG = $653			; flag: modifier keys currently pressed?											
 217                   						;	bits: 1=SHIFT,2=Commodore,4=CTRL											
 218                   																	
 219                   MODE = $291				; flag: enable changing char sets with SHIFT/C= ?																	
 220                   						;	$80=disabled, 0=enabled																	
 221                   																							
 222                   AUTODN = $292			; flag: scroll screen on col 40/last line?																							
 223                   						;	0=yes; otherwise=no																							
 224                   																													
 225                   																													
 226                   																		 
 227                   BUF = $200				; BASIC line editor input buffer 
 228                    
 229                    												
 230                   ;
 231                   ; PETSCII
 232                   ;
 233                   SPC = $20
 234                   CR = $0d
 235                   RVS_ON = $12 
 236                   RVS_OFF = $92 
 237                   CLR = $93 
 238                   BLACK = $90
 239                   WHITE = $05
 240                   RED = $1c
 241                   GREEN = $1e
 242                   BLUE = $1f
 243                   ORANGE = $81
 244                   BROWN = $95
 245                   PURPLE = $9c
 246                   YELLOW = $9e
 247                   CYAN = $9f
 248                   LT_RED = $96
 249                   DK_GRAY = $97
 250                   GRAY = $98
 251                   LT_GRAY = $9b
 252                   LT_GREEN = $99
 253                   LT_BLUE = $9a
 254                   HOME = $13
 255                   DEL = $14
 256                   UP = $91
 257                   DOWN = $11
 258                   LEFT = $9d
 259                   RIGHT = $1d
 260                   SHIFT_ON = $09
 261                   SHIFT_OFF = $08
 262                   MODE_TEXT = $0e
 263                   MODE_GRAPH = $8e
 264                   F1 = $85
 265                   F2 = $86
 266                   F3 = $87
 267                   F4 = $88
 268                   F5 = $89
 269                   F6 = $8a
 270                   F7 = $8b
 271                   F8 = $8c 
 272                   DBL_QUOTE = $22 
 273                   SNGL_QUOTE = $27 
 274                   GRAPH_SLASH = $6e 
 275                   GRAPH_BACKSLASH = $6d 
 276                   PIPE = $7d 
 277                   DASH = $60 
 278                   
 279                   ;			
 280                   ; keyboard constants			
 281                   ;			
 282                   SHIFT_KEYS=$028d
 283                   KEY_SHIFT=%00000001
 284                   KEY_COMM=%000000010
 285                   KEY_CTRL=%00000100
 286                   
 287                   ;
 288                   ; zero page locations
 289                   ;
 290                   ; used by tape routines
 291                   ;
 292                   TSERVO = $92
 293                   TEOB = $96
 294                   TEMPXY = $97
 295                   TPARIT = $9b
 296                   TBYTFL = $9c
 297                   HDRTYP = $9e
 298                   PTR1 = $9e
 299                   PTR2 = $9f
 300                   TSFCNT = $a3
 301                   TBTCNT = $a4
 302                   CNTDN = $A5
 303                   BUFPNT = $a6
 304                   PASNUM = $a7
 305                   RIDATA = $aa
 306                   TCKS = $ab
 307                   CMP00 = $b0
 308                   CMPB01 = $b1
 309                   TAPE10 = $b2
 310                   TAPE11 = $b3
 311                   ;
 312                   ; used by rs-232
 313                   RIBUF0 = $f7
 314                   RIBUF1 = $f8
 315                   ROBUF0 = $f9
 316                   ROBUF1 = $fa
 317                   ;
 318                   ; unused
 319                   ;
 320                   MISC_PTR0 = $fb
 321                   MISC_PTR1 = $fc 
 322                   
 323                   ;
 324                   ; I/O Registers
 325                   ;
 326                   SPRITE0_X = $d000
 327                   SPRITE0_Y = $d001
 328                   SPRITE1_X = $d002
 329                   SPRITE1_Y = $d003
 330                   SPRITE2_X = $d004
 331                   SPRITE2_Y = $d005
 332                   SPRITE3_X = $d006
 333                   SPRITE3_Y = $d007
 334                   SPRITE4_X = $d008
 335                   SPRITE4_Y = $d009
 336                   SPRITE5_X = $d00a
 337                   SPRITE5_Y = $d00b
 338                   SPRITE6_X = $d00c
 339                   SPRITE6_Y = $d00d
 340                   SPRITE7_X = $d00e
 341                   SPRITE7_Y = $d00f
 342                   
 343                   SPRITE_MSB = $d010	; sprite 0-7 MSB of x coord
 344                   SCREEN_REG1= $d011	; bits 0-2:vertical raster roll
 345                   					; bit 3: screenm height (24/25 rows)
 346                   					; bit 4: screen off/on
 347                   					; bit 5: text/bitmap screen
 348                   					; bit 6: extended background mode
 349                   					; bit 7: 	read: current raster line
 350                   					;			write: line to generate IRQ at
 351                   					
 352                   RASTER_LINE = $d012 ; read: current raster line
 353                   LIGHTPEN_X = $d013
 354                   LIGHTPEN_Y = $d014
 355                   SPRITE_EN = $d015		; enable/disable bits for sprites 0-7
 356                   
 357                   SCREEN_CTRL = $d016	; 	bits 0-2:horiz raster scroll	
 358                   					;	bit 3: screen width - 38/40 cols	
 359                   					;	bit 4: multicolor mode	
 360                   						
 361                   SPRITE_2X_HT = $d017
 362                   MEM_SETUP = $d018	;	bits 1-3: in text mode, pointer to
 363                   					;		character memory
 364                   					; 	bits 4-7: pointer to screen memory
 365                   					
 366                   SPRITE_PRI = $d01b 	;	bits determine whether sprite x drawn  
 367                   					;		in front of/behind background
 368                   					
 369                   SPRITE_MULTI = $d01a ; sprites 0-7 multicolor on/off 
 370                   SPRITE_2X_WD = $d01d					
 371                   SPR2SPR_COLL = $d01e ; 	read: sprites have collided,					
 372                   					;	write: detect sprite-sprite collisions					
 373                   										
 374                   BORDER_COLOR = $d020 ; bits 0-3 										
 375                   BACKG_COLOR = $d021	; bits 0-3				
 376                   BKG_MULTI_CLR1 = $d022			
 377                   BKG_MULTI_CLR2 = $d023			
 378                   BKG_MULTI_CLR3 = $d024			
 379                   SPR_MULTI_CLR1 = $d025			
 380                   SPR_MULTI_CLR2 = $d026			
 381                   			
 382                   SPRITE0_COLOR = $d027 ; bits 0-3						
 383                   SPRITE1_COLOR = $d028 ; bits 0-3						
 384                   SPRITE2_COLOR = $d029 ; bits 0-3						
 385                   SPRITE3_COLOR = $d02a ; bits 0-3						
 386                   SPRITE4_COLOR = $d02b ; bits 0-3						
 387                   SPRITE5_COLOR = $d02c ; bits 0-3						
 388                   SPRITE6_COLOR = $d02d ; bits 0-3						
 389                   SPRITE7_COLOR = $d02e ; bits 0-3						
 390                   						
 391                   PROCESSOR_DDR = $0	; bits 0-7: set read/write for bit x 
 392                   					;	of processor port					
 393                   										
 394                   PROCESSOR_PORT = $1	; 	bit 0: RAM/ROM at $a000-bfff										
 395                   					;	bit 1: RAM/ROM at $e000-ffff										
 396                   					;	bit 2: RAM/IO ports at $d000-dfff										
 397                   					;	bits 3-5: datasette										
 398                   															
 399                   PRA  =  $dc00			; CIA#1 (Port Register A)
 400                   DDRA =  $dc02			; CIA#1 (Data Direction Register A)
 401                   
 402                   PRB  =  $dc01			; CIA#1 (Port Register B)
 403                   DDRB =  $dc03			; CIA#1 (Data Direction Register B)
 404                   
 405                   SCREEN_RAM = $400
 406                   COLOR_RAM = $d800
 407                   															  					
 408                   
   3                   .endif
   4                   
   5                   macros=1
   6                   
   7                   
   8                   push_axy	.macro
  14                   			.endm
  15                   
  16                   pull_axy	.macro						
  22                   			.endm			
  23                   ;
  24                   ;	"~" character prints as CR(13)
  25                   ;
  26                   print_str	.macro
  44                   			.endm
  45                   
  46                   print_str_addr .macro			
  62                   			.endm			
  63                   			
  64                   ;print_str_cr .segment			
  65                   ;			#print_str "@1"			
  66                   ;			#print_char 13			
  67                   ;			.endm			
  68                   						
  69                   
  70                   print_int	.macro
  83                   			.endm
  84                   
  85                   print_int_var .macro
  98                   			.endm
  99                   
 100                   ; loads a,y with the value of the int pointed to 
 101                   ;	by 16-bit ptr \1
 102                   get_ptr_int	.macro
 116                   			.endm
 117                   ;
 118                   ; print a 16-bit int referenced by the
 119                   ;	zero-page 16-bit pointer starting at \1
 120                   ;
 121                   print_int_ptr .macro
 129                   			.endm
 130                   
 131                   print_char_ptr .macro			
 140                   			.endm			
 141                   						
 142                   ;
 143                   ; print a zt string referenced by the zero-page 
 144                   ;	16-bit pointer starting at \1
 145                   ;
 146                   print_str_ptr .macro
 174                   			.endm
 175                   
 176                   ;
 177                   ;	
 178                   ;
 179                   print_ay	.macro
 188                   			.endm
 189                   			
 190                   
 191                   print_char	.macro
 198                   			.endm
 199                   			
 200                   print_spc	.macro			
 202                   			.endm			
 203                   						
 204                   print_cr	.macro						
 206                   			.endm						
 207                   															
 208                   			
 209                   print_a		.macro
 241                   			.endm
 242                   
 243                   print_a_bare .macro			
 249                   			.endm
 250                   			
 251                   			
 252                   print_byte	.macro
 264                   			.endm
 265                   			
 266                   print_ptr	.macro
 279                   			.endm
 280                   			
 281                   ;			
 282                   ;  increment a 16-bit value 
 283                   ; 			
 284                   inc16		.macro					
 325                   			.endm								
 326                   
 327                   ;											
 328                   ; store a 16-bit reference to location \1 in pointer \2											
 329                   ;	NOTE: does not save contents of A!											
 330                   ;											
 331                   store16		.macro											
 339                   			.endm											
 340                   														
 341                   ;											
 342                   ; compare two 16-bit pointers. carry set if equal.											
 343                   ;	NOTE: doesn't save A											
 344                   ;											
 345                   cmp16vars	.macro						
 374                   			.endm						
 375                   									
 376                   cmp16const	.macro						
 405                   			.endm						
 406                   									
 407                   
  13                   .endif
  14                   
  15                   DEBUG_MACROS	.var 0
  16                   
  17                   
  18                   * = $0801
  19                   
  20                   ;
  21                   ; for indirect mode, our pointers need to be in ZP
  22                   ;
  23                   screen_ptr=$f7;	.byte <SCREEN_RAM, >SCREEN_RAM
  24                   color_ptr=$f9;	.byte <COLOR_RAM, >COLOR_RAM
  25                   
  26                   sbuf_ptr=$fb;	.byte <screen_buffer, >screen_buffer
  27                   cbuf_ptr=$b0;	.byte <color_buffer, >color_buffer
  28                   
  29                   counter=$b2;		.byte 00,00
  30                   
  31                   
  32                   ; BASIC header
  33                   ; 10 SYS (2064)
  34 0801 0e 08 0a 00      .byte   $0E, $08, $0A, $00, $9E, $20, $28
     0805 9e 20 28 
  35 0808 32 30 36 34 
  36 080c 29 00 00 00 
  37                       
  38                   
  39                   code_begin
  40 0810 4c 75 0f     			jmp init
  41                   
  42                   ;
  43                   ; copy 2 regions (e.g. screencode,color data) from
  44                   ;	locations pointed at by \1 to \2, and from \3 to \4.
  45                   ;	\5 is the total number of 256-byte pages to copy. 
  46                   ;
  47                   copy_scn_data .macro
  48                   
  49                   			;.ifdef DEBUG
  50                   				#print_str "/1 start="
  51                   				#print_ptr \1
  52                   				#print_char CR
  53                   				
  54                   				#print_str "/2 start="
  55                   				#print_int_var \2
  56                   				#print_char CR
  57                   				
  58                   				#print_str "/3 start="
  59                   				#print_ptr \3
  60                   				#print_char CR
  61                   				
  62                   				#print_str "/4 start="
  63                   				#print_int_var \4
  64                   				#print_char CR
  65                   				
  66                   				#print_str "counter start="
  67                   				#print_int_var counter
  68                   				#print_char CR
  69                   				
  70                   				#print_str "/5="
  71                   				#print_int_var \5
  72                   				#print_char CR
  73                   			;.endif
  74                   			
  75                   			
  76                   			ldy #0
  77                   			sty counter
  78                   			
  79                   loop			
  80                   			;inc $0400	
  81                   				
  82                   				
  83                   			lda (\1),y
  84                   			sta (\2),y
  85                   			
  86                   			lda (\3),y
  87                   			sta (\4),y
  88                   			
  89                   			iny
  90                   			beq increment
  91                   			
  92                   			#inc16 counter			
  93                   			#cmp16const counter,\5
  94                   			bcc loop
  95                   
  96                   increment			
  97                   			;inc $0401			
  98                   						
  99                   			inc \1+1
 100                   			inc \2+1
 101                   			inc \3+1
 102                   			inc \4+1
 103                   ;DEBUG_MACROS .var 1
 104                   check_final						
 105                   			lda counter						
 106                   			cmp 4						
 107                   			bcc loop ;C set if >=						
 108                   exit
 109                   
 110                   ;DEBUG=1
 111                   			;.ifdef DEBUG
 112                   				#print_str "done!~"
 113                   				
 114                   				#print_str "/1 final="
 115                   				#print_ptr \1
 116                   				#print_char CR
 117                   				
 118                   				#print_str "/2 final="
 119                   				#print_int_var \2
 120                   				#print_char CR
 121                   				
 122                   				#print_str "/3 final="
 123                   				#print_ptr \3
 124                   				#print_char CR
 125                   				
 126                   				#print_str "/4 final="
 127                   				#print_int_var \4
 128                   				#print_char CR
 129                   				
 130                   				#print_str "counter final="
 131                   				#print_int_var counter
 132                   				#print_char CR
 133                   			;.endif
 134                   			
 135                   			
 136                   			.endm
 137                   
 138                   ;
 139                   ; initializes screen pointers
 140                   ;
 141                   set_screen_ptrs
 142                   			#store16 SCREEN_RAM,screen_ptr
 332                   														
 333 0813 a9 00        			lda #<\1											
 334 0815 85 f7        			sta \2											
 335                   														
 336 0817 a9 04        			lda #>\1											
 337 0819 85 f8        			sta \2+1											
 338                   														
 143                   			#store16 COLOR_RAM,color_ptr
 332                   														
 333 081b a9 00        			lda #<\1											
 334 081d 85 f9        			sta \2											
 335                   														
 336 081f a9 d8        			lda #>\1											
 337 0821 85 fa        			sta \2+1											
 338                   														
 144                   			#store16 screen_buffer,sbuf_ptr
 332                   														
 333 0823 a9 c2        			lda #<\1											
 334 0825 85 fb        			sta \2											
 335                   														
 336 0827 a9 10        			lda #>\1											
 337 0829 85 fc        			sta \2+1											
 338                   														
 145                   			#store16 color_buffer,cbuf_ptr
 332                   														
 333 082b a9 aa        			lda #<\1											
 334 082d 85 b0        			sta \2											
 335                   														
 336 082f a9 14        			lda #>\1											
 337 0831 85 b1        			sta \2+1											
 338                   														
 146                   			#store16 0,counter
 332                   														
 333 0833 a9 00        			lda #<\1											
 334 0835 85 b2        			sta \2											
 335                   														
 336 0837 a9 00        			lda #>\1											
 337 0839 85 b3        			sta \2+1											
 338                   														
 147                   			
 148 083b 60           			rts
 149                   			
 150                   ;
 151                   ;	copy screen,color maps from display mem to buffers
 152                   ;
 153                   store_screens	
 154                   .block
 155 083c 20 13 08     			jsr set_screen_ptrs						
 156                   									
 157                   			;.ifdef DEBUG
 158                   				#print_str "storing screens:"						
  27                   			
  28 083f 48           			pha
  29 0840 8a           			txa
  30 0841 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0842 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0844 bd 58 08     			lda \1,x
  51 0847 f0 0c        			beq exit
  52                   			
  53 0849 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 084b d0 02        			bne print
  55                   			
  56 084d a9 0d        			lda #CR
  57                   			
  58                   print			
  59 084f 20 d2 ff     			jsr CHROUT			
  60 0852 e8           			inx			
  61 0853 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0855 4c 69 08     			jmp end_text		
  36                   						
  37 0858 53 54 4f 52  rtxt			.null "@1"
     085c 49 4e 47 20 
     0860 53 43 52 45 
     0864 45 4e 53 3a 
     0868 00 
  38                   
  39                   end_text							
  40 0869 68           			pla						
  41 086a aa           			tax						
  42 086b 68           			pla						
  43                   									
 159                   				#print_int_var screen_ptr						
  86 086c 48           			pha
  87 086d 98           			tya
  88 086e 48           			pha
  89                   			
  90 086f a5 f8        			lda \1+1
  91 0871 a4 f7        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0873 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0876 68           			pla
  96 0877 a8           			tay
  97 0878 68           			pla
 160                   				#print_str "->"						
  27                   			
  28 0879 48           			pha
  29 087a 8a           			txa
  30 087b 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 087c a2 00        			ldx #0
  48                   			
  49                   loop			
  50 087e bd 92 08     			lda \1,x
  51 0881 f0 0c        			beq exit
  52                   			
  53 0883 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0885 d0 02        			bne print
  55                   			
  56 0887 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0889 20 d2 ff     			jsr CHROUT			
  60 088c e8           			inx			
  61 088d d0 ef        			bne loop			
  33                   			
  34                   exit
  35 088f 4c 95 08     			jmp end_text		
  36                   						
  37 0892 2d 3e 00     rtxt			.null "@1"
  38                   
  39                   end_text							
  40 0895 68           			pla						
  41 0896 aa           			tax						
  42 0897 68           			pla						
  43                   									
 161                   				#print_int_var sbuf_ptr						
  86 0898 48           			pha
  87 0899 98           			tya
  88 089a 48           			pha
  89                   			
  90 089b a5 fc        			lda \1+1
  91 089d a4 fb        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 089f 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 08a2 68           			pla
  96 08a3 a8           			tay
  97 08a4 68           			pla
 162                   				#print_spc						
 201                   			#print_char SPC			
 192 08a5 48           			pha	
 193                   				
 194 08a6 a9 20        			lda #\1
 195 08a8 20 d2 ff     			jsr CHROUT
 196                   			
 197 08ab 68           			pla
 163                   				#print_int_var color_ptr						
  86 08ac 48           			pha
  87 08ad 98           			tya
  88 08ae 48           			pha
  89                   			
  90 08af a5 fa        			lda \1+1
  91 08b1 a4 f9        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 08b3 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 08b6 68           			pla
  96 08b7 a8           			tay
  97 08b8 68           			pla
 164                   				#print_str "->"						
  27                   			
  28 08b9 48           			pha
  29 08ba 8a           			txa
  30 08bb 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 08bc a2 00        			ldx #0
  48                   			
  49                   loop			
  50 08be bd d2 08     			lda \1,x
  51 08c1 f0 0c        			beq exit
  52                   			
  53 08c3 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 08c5 d0 02        			bne print
  55                   			
  56 08c7 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 08c9 20 d2 ff     			jsr CHROUT			
  60 08cc e8           			inx			
  61 08cd d0 ef        			bne loop			
  33                   			
  34                   exit
  35 08cf 4c d5 08     			jmp end_text		
  36                   						
  37 08d2 2d 3e 00     rtxt			.null "@1"
  38                   
  39                   end_text							
  40 08d5 68           			pla						
  41 08d6 aa           			tax						
  42 08d7 68           			pla						
  43                   									
 165                   				#print_int_var cbuf_ptr						
  86 08d8 48           			pha
  87 08d9 98           			tya
  88 08da 48           			pha
  89                   			
  90 08db a5 b1        			lda \1+1
  91 08dd a4 b0        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 08df 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 08e2 68           			pla
  96 08e3 a8           			tay
  97 08e4 68           			pla
 166                   				#print_cr						
 205                   			#print_char CR						
 192 08e5 48           			pha	
 193                   				
 194 08e6 a9 0d        			lda #\1
 195 08e8 20 d2 ff     			jsr CHROUT
 196                   			
 197 08eb 68           			pla
 167                   			;.endif						
 168                   									
 169                   			#print_char $1c						
 192 08ec 48           			pha	
 193                   				
 194 08ed a9 1c        			lda #\1
 195 08ef 20 d2 ff     			jsr CHROUT
 196                   			
 197 08f2 68           			pla
 170                   			#copy_scn_data screen_ptr,sbuf_ptr,color_ptr,cbuf_ptr,4 
  48                   
  49                   			;.ifdef DEBUG
  50                   				#print_str "/1 start="
  27                   			
  28 08f3 48           			pha
  29 08f4 8a           			txa
  30 08f5 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 08f6 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 08f8 bd 0c 09     			lda \1,x
  51 08fb f0 0c        			beq exit
  52                   			
  53 08fd c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 08ff d0 02        			bne print
  55                   			
  56 0901 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0903 20 d2 ff     			jsr CHROUT			
  60 0906 e8           			inx			
  61 0907 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0909 4c 16 09     			jmp end_text		
  36                   						
  37 090c 2f 31 20 53  rtxt			.null "@1"
     0910 54 41 52 54 
     0914 3d 00 
  38                   
  39                   end_text							
  40 0916 68           			pla						
  41 0917 aa           			tax						
  42 0918 68           			pla						
  43                   									
  51                   				#print_ptr \1
 267                   			
 268 0919 48           			pha
 269 091a 98           			tya
 270 091b 48           			pha
 271                   			
 272 091c a5 f8        			lda \1+1
 273 091e a4 f9        			ldy \1+2
 274 0920 20 cd bd     			jsr LINPRT
 275                   			
 276 0923 68           			pla
 277 0924 a8           			tay
 278 0925 68           			pla
  52                   				#print_char CR
 192 0926 48           			pha	
 193                   				
 194 0927 a9 0d        			lda #\1
 195 0929 20 d2 ff     			jsr CHROUT
 196                   			
 197 092c 68           			pla
  53                   				
  54                   				#print_str "/2 start="
  27                   			
  28 092d 48           			pha
  29 092e 8a           			txa
  30 092f 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0930 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0932 bd 46 09     			lda \1,x
  51 0935 f0 0c        			beq exit
  52                   			
  53 0937 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0939 d0 02        			bne print
  55                   			
  56 093b a9 0d        			lda #CR
  57                   			
  58                   print			
  59 093d 20 d2 ff     			jsr CHROUT			
  60 0940 e8           			inx			
  61 0941 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0943 4c 50 09     			jmp end_text		
  36                   						
  37 0946 2f 32 20 53  rtxt			.null "@1"
     094a 54 41 52 54 
     094e 3d 00 
  38                   
  39                   end_text							
  40 0950 68           			pla						
  41 0951 aa           			tax						
  42 0952 68           			pla						
  43                   									
  55                   				#print_int_var \2
  86 0953 48           			pha
  87 0954 98           			tya
  88 0955 48           			pha
  89                   			
  90 0956 a5 fc        			lda \1+1
  91 0958 a4 fb        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 095a 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 095d 68           			pla
  96 095e a8           			tay
  97 095f 68           			pla
  56                   				#print_char CR
 192 0960 48           			pha	
 193                   				
 194 0961 a9 0d        			lda #\1
 195 0963 20 d2 ff     			jsr CHROUT
 196                   			
 197 0966 68           			pla
  57                   				
  58                   				#print_str "/3 start="
  27                   			
  28 0967 48           			pha
  29 0968 8a           			txa
  30 0969 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 096a a2 00        			ldx #0
  48                   			
  49                   loop			
  50 096c bd 80 09     			lda \1,x
  51 096f f0 0c        			beq exit
  52                   			
  53 0971 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0973 d0 02        			bne print
  55                   			
  56 0975 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0977 20 d2 ff     			jsr CHROUT			
  60 097a e8           			inx			
  61 097b d0 ef        			bne loop			
  33                   			
  34                   exit
  35 097d 4c 8a 09     			jmp end_text		
  36                   						
  37 0980 2f 33 20 53  rtxt			.null "@1"
     0984 54 41 52 54 
     0988 3d 00 
  38                   
  39                   end_text							
  40 098a 68           			pla						
  41 098b aa           			tax						
  42 098c 68           			pla						
  43                   									
  59                   				#print_ptr \3
 267                   			
 268 098d 48           			pha
 269 098e 98           			tya
 270 098f 48           			pha
 271                   			
 272 0990 a5 fa        			lda \1+1
 273 0992 a4 fb        			ldy \1+2
 274 0994 20 cd bd     			jsr LINPRT
 275                   			
 276 0997 68           			pla
 277 0998 a8           			tay
 278 0999 68           			pla
  60                   				#print_char CR
 192 099a 48           			pha	
 193                   				
 194 099b a9 0d        			lda #\1
 195 099d 20 d2 ff     			jsr CHROUT
 196                   			
 197 09a0 68           			pla
  61                   				
  62                   				#print_str "/4 start="
  27                   			
  28 09a1 48           			pha
  29 09a2 8a           			txa
  30 09a3 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 09a4 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 09a6 bd ba 09     			lda \1,x
  51 09a9 f0 0c        			beq exit
  52                   			
  53 09ab c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 09ad d0 02        			bne print
  55                   			
  56 09af a9 0d        			lda #CR
  57                   			
  58                   print			
  59 09b1 20 d2 ff     			jsr CHROUT			
  60 09b4 e8           			inx			
  61 09b5 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 09b7 4c c4 09     			jmp end_text		
  36                   						
  37 09ba 2f 34 20 53  rtxt			.null "@1"
     09be 54 41 52 54 
     09c2 3d 00 
  38                   
  39                   end_text							
  40 09c4 68           			pla						
  41 09c5 aa           			tax						
  42 09c6 68           			pla						
  43                   									
  63                   				#print_int_var \4
  86 09c7 48           			pha
  87 09c8 98           			tya
  88 09c9 48           			pha
  89                   			
  90 09ca a5 b1        			lda \1+1
  91 09cc a4 b0        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 09ce 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 09d1 68           			pla
  96 09d2 a8           			tay
  97 09d3 68           			pla
  64                   				#print_char CR
 192 09d4 48           			pha	
 193                   				
 194 09d5 a9 0d        			lda #\1
 195 09d7 20 d2 ff     			jsr CHROUT
 196                   			
 197 09da 68           			pla
  65                   				
  66                   				#print_str "counter start="
  27                   			
  28 09db 48           			pha
  29 09dc 8a           			txa
  30 09dd 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 09de a2 00        			ldx #0
  48                   			
  49                   loop			
  50 09e0 bd f4 09     			lda \1,x
  51 09e3 f0 0c        			beq exit
  52                   			
  53 09e5 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 09e7 d0 02        			bne print
  55                   			
  56 09e9 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 09eb 20 d2 ff     			jsr CHROUT			
  60 09ee e8           			inx			
  61 09ef d0 ef        			bne loop			
  33                   			
  34                   exit
  35 09f1 4c 03 0a     			jmp end_text		
  36                   						
  37 09f4 43 4f 55 4e  rtxt			.null "@1"
     09f8 54 45 52 20 
     09fc 53 54 41 52 
     0a00 54 3d 00 
  38                   
  39                   end_text							
  40 0a03 68           			pla						
  41 0a04 aa           			tax						
  42 0a05 68           			pla						
  43                   									
  67                   				#print_int_var counter
  86 0a06 48           			pha
  87 0a07 98           			tya
  88 0a08 48           			pha
  89                   			
  90 0a09 a5 b3        			lda \1+1
  91 0a0b a4 b2        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0a0d 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0a10 68           			pla
  96 0a11 a8           			tay
  97 0a12 68           			pla
  68                   				#print_char CR
 192 0a13 48           			pha	
 193                   				
 194 0a14 a9 0d        			lda #\1
 195 0a16 20 d2 ff     			jsr CHROUT
 196                   			
 197 0a19 68           			pla
  69                   				
  70                   				#print_str "/5="
  27                   			
  28 0a1a 48           			pha
  29 0a1b 8a           			txa
  30 0a1c 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0a1d a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0a1f bd 33 0a     			lda \1,x
  51 0a22 f0 0c        			beq exit
  52                   			
  53 0a24 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0a26 d0 02        			bne print
  55                   			
  56 0a28 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0a2a 20 d2 ff     			jsr CHROUT			
  60 0a2d e8           			inx			
  61 0a2e d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0a30 4c 37 0a     			jmp end_text		
  36                   						
  37 0a33 2f 35 3d 00 
  38                   
  39                   end_text							
  40 0a37 68           			pla						
  41 0a38 aa           			tax						
  42 0a39 68           			pla						
  43                   									
  71                   				#print_int_var \5
  86 0a3a 48           			pha
  87 0a3b 98           			tya
  88 0a3c 48           			pha
  89                   			
  90 0a3d a5 05        			lda \1+1
  91 0a3f a4 04        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0a41 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0a44 68           			pla
  96 0a45 a8           			tay
  97 0a46 68           			pla
  72                   				#print_char CR
 192 0a47 48           			pha	
 193                   				
 194 0a48 a9 0d        			lda #\1
 195 0a4a 20 d2 ff     			jsr CHROUT
 196                   			
 197 0a4d 68           			pla
  73                   			;.endif
  74                   			
  75                   			
  76 0a4e a0 00        			ldy #0
  77 0a50 84 b2        			sty counter
  78                   			
  79                   loop			
  80                   			;inc $0400	
  81                   				
  82                   				
  83 0a52 b1 f7        			lda (\1),y
  84 0a54 91 fb        			sta (\2),y
  85                   			
  86 0a56 b1 f9        			lda (\3),y
  87 0a58 91 b0        			sta (\4),y
  88                   			
  89 0a5a c8           			iny
  90 0a5b f0 16        			beq increment
  91                   			
  92                   			#inc16 counter			
 285                   			;#print_str "inc16"					
 286                   								
 287                   ;			pha					
 288                   ;								
 289                   ;			clc
 290                   ;			lda \1					
 291                   ;			#print_str "inc16:a="					
 292                   ;			#print_a					
 293                   ;			#print_char 13					
 294                   ;			adc #1					
 295                   ;			#print_str "inc16:after inc, a="				
 296                   ;			#print_a				
 297                   ;			#print_char 13				
 298                   ;							
 299                   ;			sta \1					
 300                   ;			lda \2					
 301                   ;			adc #0					
 302                   ;			sta \2					
 303                   ;								
 304                   ;			pla								
 305                   											
 306                   			.ifne DEBUG_MACROS								
 307                   				#print_str "inc16:before="								
 308                   				#print_int \1								
 309                   				#print_char CR								
 310                   			.endif								
 311                   											
 312 0a5d e6 b2        			inc \1					
 313 0a5f d0 02        			bne done					
 314                   								
 315 0a61 e6 b3        			inc \1+1					
 316                   								
 317                   								
 318                   done								
 319                   			.ifne DEBUG_MACROS			
 320                   				#print_str "inc16:after="			
 321                   				#print_int \1			
 322                   				#print_char CR			
 323                   			.endif			
 324                   						
  93                   			#cmp16const counter,\5
 377                   			.ifne DEBUG_MACROS						
 378                   				#print_str "cmp16:/1="						
 379                   				#print_int \1						
 380                   				#print_str " /2="						
 381                   				#print_int \2						
 382                   				#print_char SPC						
 383                   			.endif						
 384                   									
 385 0a63 18           			clc						
 386                   									
 387 0a64 a5 b2        			lda \1						
 388 0a66 c9 b2        			cmp #<\1					
 389 0a68 d0 07        			bne exit					
 390                   								
 391 0a6a a5 b3        			lda \1+1					
 392 0a6c c9 00        			cmp #>\1					
 393 0a6e d0 01        			bne exit					
 394                   								
 395                   			.ifne DEBUG_MACROS					
 396                   				#print_str "EQUAL!"					
 397                   			.endif					
 398 0a70 38           			sec					
 399                   								
 400                   exit																
 401                   			.ifne DEBUG_MACROS															
 402                   				#print_char CR															
 403                   			.endif															
 404                   																		
  94 0a71 90 df        			bcc loop
  95                   
  96                   increment			
  97                   			;inc $0401			
  98                   						
  99 0a73 e6 f8        			inc \1+1
 100 0a75 e6 fc        			inc \2+1
 101 0a77 e6 fa        			inc \3+1
 102 0a79 e6 b1        			inc \4+1
 103                   ;DEBUG_MACROS .var 1
 104                   check_final						
 105 0a7b a5 b2        			lda counter						
 106 0a7d c5 04        			cmp 4						
 107 0a7f 90 d1        			bcc loop ;C set if >=						
 108                   exit
 109                   
 110                   ;DEBUG=1
 111                   			;.ifdef DEBUG
 112                   				#print_str "done!~"
  27                   			
  28 0a81 48           			pha
  29 0a82 8a           			txa
  30 0a83 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0a84 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0a86 bd 9a 0a     			lda \1,x
  51 0a89 f0 0c        			beq exit
  52                   			
  53 0a8b c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0a8d d0 02        			bne print
  55                   			
  56 0a8f a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0a91 20 d2 ff     			jsr CHROUT			
  60 0a94 e8           			inx			
  61 0a95 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0a97 4c a1 0a     			jmp end_text		
  36                   						
  37 0a9a 44 4f 4e 45  rtxt			.null "@1"
     0a9e 21 7e 00 
  38                   
  39                   end_text							
  40 0aa1 68           			pla						
  41 0aa2 aa           			tax						
  42 0aa3 68           			pla						
  43                   									
 113                   				
 114                   				#print_str "/1 final="
  27                   			
  28 0aa4 48           			pha
  29 0aa5 8a           			txa
  30 0aa6 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0aa7 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0aa9 bd bd 0a     			lda \1,x
  51 0aac f0 0c        			beq exit
  52                   			
  53 0aae c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0ab0 d0 02        			bne print
  55                   			
  56 0ab2 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0ab4 20 d2 ff     			jsr CHROUT			
  60 0ab7 e8           			inx			
  61 0ab8 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0aba 4c c7 0a     			jmp end_text		
  36                   						
  37 0abd 2f 31 20 46  rtxt			.null "@1"
     0ac1 49 4e 41 4c 
     0ac5 3d 00 
  38                   
  39                   end_text							
  40 0ac7 68           			pla						
  41 0ac8 aa           			tax						
  42 0ac9 68           			pla						
  43                   									
 115                   				#print_ptr \1
 267                   			
 268 0aca 48           			pha
 269 0acb 98           			tya
 270 0acc 48           			pha
 271                   			
 272 0acd a5 f8        			lda \1+1
 273 0acf a4 f9        			ldy \1+2
 274 0ad1 20 cd bd     			jsr LINPRT
 275                   			
 276 0ad4 68           			pla
 277 0ad5 a8           			tay
 278 0ad6 68           			pla
 116                   				#print_char CR
 192 0ad7 48           			pha	
 193                   				
 194 0ad8 a9 0d        			lda #\1
 195 0ada 20 d2 ff     			jsr CHROUT
 196                   			
 197 0add 68           			pla
 117                   				
 118                   				#print_str "/2 final="
  27                   			
  28 0ade 48           			pha
  29 0adf 8a           			txa
  30 0ae0 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0ae1 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0ae3 bd f7 0a     			lda \1,x
  51 0ae6 f0 0c        			beq exit
  52                   			
  53 0ae8 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0aea d0 02        			bne print
  55                   			
  56 0aec a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0aee 20 d2 ff     			jsr CHROUT			
  60 0af1 e8           			inx			
  61 0af2 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0af4 4c 01 0b     			jmp end_text		
  36                   						
  37 0af7 2f 32 20 46  rtxt			.null "@1"
     0afb 49 4e 41 4c 
     0aff 3d 00 
  38                   
  39                   end_text							
  40 0b01 68           			pla						
  41 0b02 aa           			tax						
  42 0b03 68           			pla						
  43                   									
 119                   				#print_int_var \2
  86 0b04 48           			pha
  87 0b05 98           			tya
  88 0b06 48           			pha
  89                   			
  90 0b07 a5 fc        			lda \1+1
  91 0b09 a4 fb        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0b0b 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0b0e 68           			pla
  96 0b0f a8           			tay
  97 0b10 68           			pla
 120                   				#print_char CR
 192 0b11 48           			pha	
 193                   				
 194 0b12 a9 0d        			lda #\1
 195 0b14 20 d2 ff     			jsr CHROUT
 196                   			
 197 0b17 68           			pla
 121                   				
 122                   				#print_str "/3 final="
  27                   			
  28 0b18 48           			pha
  29 0b19 8a           			txa
  30 0b1a 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0b1b a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0b1d bd 31 0b     			lda \1,x
  51 0b20 f0 0c        			beq exit
  52                   			
  53 0b22 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0b24 d0 02        			bne print
  55                   			
  56 0b26 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0b28 20 d2 ff     			jsr CHROUT			
  60 0b2b e8           			inx			
  61 0b2c d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0b2e 4c 3b 0b     			jmp end_text		
  36                   						
  37 0b31 2f 33 20 46  rtxt			.null "@1"
     0b35 49 4e 41 4c 
     0b39 3d 00 
  38                   
  39                   end_text							
  40 0b3b 68           			pla						
  41 0b3c aa           			tax						
  42 0b3d 68           			pla						
  43                   									
 123                   				#print_ptr \3
 267                   			
 268 0b3e 48           			pha
 269 0b3f 98           			tya
 270 0b40 48           			pha
 271                   			
 272 0b41 a5 fa        			lda \1+1
 273 0b43 a4 fb        			ldy \1+2
 274 0b45 20 cd bd     			jsr LINPRT
 275                   			
 276 0b48 68           			pla
 277 0b49 a8           			tay
 278 0b4a 68           			pla
 124                   				#print_char CR
 192 0b4b 48           			pha	
 193                   				
 194 0b4c a9 0d        			lda #\1
 195 0b4e 20 d2 ff     			jsr CHROUT
 196                   			
 197 0b51 68           			pla
 125                   				
 126                   				#print_str "/4 final="
  27                   			
  28 0b52 48           			pha
  29 0b53 8a           			txa
  30 0b54 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0b55 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0b57 bd 6b 0b     			lda \1,x
  51 0b5a f0 0c        			beq exit
  52                   			
  53 0b5c c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0b5e d0 02        			bne print
  55                   			
  56 0b60 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0b62 20 d2 ff     			jsr CHROUT			
  60 0b65 e8           			inx			
  61 0b66 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0b68 4c 75 0b     			jmp end_text		
  36                   						
  37 0b6b 2f 34 20 46  rtxt			.null "@1"
     0b6f 49 4e 41 4c 
     0b73 3d 00 
  38                   
  39                   end_text							
  40 0b75 68           			pla						
  41 0b76 aa           			tax						
  42 0b77 68           			pla						
  43                   									
 127                   				#print_int_var \4
  86 0b78 48           			pha
  87 0b79 98           			tya
  88 0b7a 48           			pha
  89                   			
  90 0b7b a5 b1        			lda \1+1
  91 0b7d a4 b0        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0b7f 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0b82 68           			pla
  96 0b83 a8           			tay
  97 0b84 68           			pla
 128                   				#print_char CR
 192 0b85 48           			pha	
 193                   				
 194 0b86 a9 0d        			lda #\1
 195 0b88 20 d2 ff     			jsr CHROUT
 196                   			
 197 0b8b 68           			pla
 129                   				
 130                   				#print_str "counter final="
  27                   			
  28 0b8c 48           			pha
  29 0b8d 8a           			txa
  30 0b8e 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0b8f a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0b91 bd a5 0b     			lda \1,x
  51 0b94 f0 0c        			beq exit
  52                   			
  53 0b96 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0b98 d0 02        			bne print
  55                   			
  56 0b9a a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0b9c 20 d2 ff     			jsr CHROUT			
  60 0b9f e8           			inx			
  61 0ba0 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0ba2 4c b4 0b     			jmp end_text		
  36                   						
  37 0ba5 43 4f 55 4e  rtxt			.null "@1"
     0ba9 54 45 52 20 
     0bad 46 49 4e 41 
     0bb1 4c 3d 00 
  38                   
  39                   end_text							
  40 0bb4 68           			pla						
  41 0bb5 aa           			tax						
  42 0bb6 68           			pla						
  43                   									
 131                   				#print_int_var counter
  86 0bb7 48           			pha
  87 0bb8 98           			tya
  88 0bb9 48           			pha
  89                   			
  90 0bba a5 b3        			lda \1+1
  91 0bbc a4 b2        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0bbe 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0bc1 68           			pla
  96 0bc2 a8           			tay
  97 0bc3 68           			pla
 132                   				#print_char CR
 192 0bc4 48           			pha	
 193                   				
 194 0bc5 a9 0d        			lda #\1
 195 0bc7 20 d2 ff     			jsr CHROUT
 196                   			
 197 0bca 68           			pla
 133                   			;.endif
 134                   			
 135                   			
 171                   								
 172 0bcb 60           			rts						
 173                   .bend			
 174                   
 175                   ;
 176                   ;	copy screen,color maps from buffers to display mem
 177                   ;
 178                   restore_screens 
 179                    
 180                   .block 
 181                   
 182 0bcc 20 13 08     			jsr set_screen_ptrs
 183                   			
 184                   			;.ifdef DEBUG
 185                   				#print_str "restoring screens:"						
  27                   			
  28 0bcf 48           			pha
  29 0bd0 8a           			txa
  30 0bd1 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0bd2 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0bd4 bd e8 0b     			lda \1,x
  51 0bd7 f0 0c        			beq exit
  52                   			
  53 0bd9 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0bdb d0 02        			bne print
  55                   			
  56 0bdd a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0bdf 20 d2 ff     			jsr CHROUT			
  60 0be2 e8           			inx			
  61 0be3 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0be5 4c fb 0b     			jmp end_text		
  36                   						
  37 0be8 52 45 53 54  rtxt			.null "@1"
     0bec 4f 52 49 4e 
     0bf0 47 20 53 43 
     0bf4 52 45 45 4e 
     0bf8 53 3a 00 
  38                   
  39                   end_text							
  40 0bfb 68           			pla						
  41 0bfc aa           			tax						
  42 0bfd 68           			pla						
  43                   									
 186                   				#print_int_var sbuf_ptr						
  86 0bfe 48           			pha
  87 0bff 98           			tya
  88 0c00 48           			pha
  89                   			
  90 0c01 a5 fc        			lda \1+1
  91 0c03 a4 fb        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0c05 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0c08 68           			pla
  96 0c09 a8           			tay
  97 0c0a 68           			pla
 187                   				#print_str "->"						
  27                   			
  28 0c0b 48           			pha
  29 0c0c 8a           			txa
  30 0c0d 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0c0e a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0c10 bd 24 0c     			lda \1,x
  51 0c13 f0 0c        			beq exit
  52                   			
  53 0c15 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0c17 d0 02        			bne print
  55                   			
  56 0c19 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0c1b 20 d2 ff     			jsr CHROUT			
  60 0c1e e8           			inx			
  61 0c1f d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0c21 4c 27 0c     			jmp end_text		
  36                   						
  37 0c24 2d 3e 00     rtxt			.null "@1"
  38                   
  39                   end_text							
  40 0c27 68           			pla						
  41 0c28 aa           			tax						
  42 0c29 68           			pla						
  43                   									
 188                   				#print_int_var screen_ptr						
  86 0c2a 48           			pha
  87 0c2b 98           			tya
  88 0c2c 48           			pha
  89                   			
  90 0c2d a5 f8        			lda \1+1
  91 0c2f a4 f7        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0c31 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0c34 68           			pla
  96 0c35 a8           			tay
  97 0c36 68           			pla
 189                   				#print_spc						
 201                   			#print_char SPC			
 192 0c37 48           			pha	
 193                   				
 194 0c38 a9 20        			lda #\1
 195 0c3a 20 d2 ff     			jsr CHROUT
 196                   			
 197 0c3d 68           			pla
 190                   				#print_int_var cbuf_ptr						
  86 0c3e 48           			pha
  87 0c3f 98           			tya
  88 0c40 48           			pha
  89                   			
  90 0c41 a5 b1        			lda \1+1
  91 0c43 a4 b0        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0c45 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0c48 68           			pla
  96 0c49 a8           			tay
  97 0c4a 68           			pla
 191                   				#print_str "->"						
  27                   			
  28 0c4b 48           			pha
  29 0c4c 8a           			txa
  30 0c4d 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0c4e a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0c50 bd 64 0c     			lda \1,x
  51 0c53 f0 0c        			beq exit
  52                   			
  53 0c55 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0c57 d0 02        			bne print
  55                   			
  56 0c59 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0c5b 20 d2 ff     			jsr CHROUT			
  60 0c5e e8           			inx			
  61 0c5f d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0c61 4c 67 0c     			jmp end_text		
  36                   						
  37 0c64 2d 3e 00     rtxt			.null "@1"
  38                   
  39                   end_text							
  40 0c67 68           			pla						
  41 0c68 aa           			tax						
  42 0c69 68           			pla						
  43                   									
 192                   				#print_int_var color_ptr						
  86 0c6a 48           			pha
  87 0c6b 98           			tya
  88 0c6c 48           			pha
  89                   			
  90 0c6d a5 fa        			lda \1+1
  91 0c6f a4 f9        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0c71 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0c74 68           			pla
  96 0c75 a8           			tay
  97 0c76 68           			pla
 193                   				#print_cr						
 205                   			#print_char CR						
 192 0c77 48           			pha	
 193                   				
 194 0c78 a9 0d        			lda #\1
 195 0c7a 20 d2 ff     			jsr CHROUT
 196                   			
 197 0c7d 68           			pla
 194                   			;.endif						
 195                   
 196                   			#print_char $1e
 192 0c7e 48           			pha	
 193                   				
 194 0c7f a9 1e        			lda #\1
 195 0c81 20 d2 ff     			jsr CHROUT
 196                   			
 197 0c84 68           			pla
 197                   			#copy_scn_data sbuf_ptr,screen_ptr,cbuf_ptr,color_ptr,4  
  48                   
  49                   			;.ifdef DEBUG
  50                   				#print_str "/1 start="
  27                   			
  28 0c85 48           			pha
  29 0c86 8a           			txa
  30 0c87 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0c88 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0c8a bd 9e 0c     			lda \1,x
  51 0c8d f0 0c        			beq exit
  52                   			
  53 0c8f c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0c91 d0 02        			bne print
  55                   			
  56 0c93 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0c95 20 d2 ff     			jsr CHROUT			
  60 0c98 e8           			inx			
  61 0c99 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0c9b 4c a8 0c     			jmp end_text		
  36                   						
  37 0c9e 2f 31 20 53  rtxt			.null "@1"
     0ca2 54 41 52 54 
     0ca6 3d 00 
  38                   
  39                   end_text							
  40 0ca8 68           			pla						
  41 0ca9 aa           			tax						
  42 0caa 68           			pla						
  43                   									
  51                   				#print_ptr \1
 267                   			
 268 0cab 48           			pha
 269 0cac 98           			tya
 270 0cad 48           			pha
 271                   			
 272 0cae a5 fc        			lda \1+1
 273 0cb0 a4 fd        			ldy \1+2
 274 0cb2 20 cd bd     			jsr LINPRT
 275                   			
 276 0cb5 68           			pla
 277 0cb6 a8           			tay
 278 0cb7 68           			pla
  52                   				#print_char CR
 192 0cb8 48           			pha	
 193                   				
 194 0cb9 a9 0d        			lda #\1
 195 0cbb 20 d2 ff     			jsr CHROUT
 196                   			
 197 0cbe 68           			pla
  53                   				
  54                   				#print_str "/2 start="
  27                   			
  28 0cbf 48           			pha
  29 0cc0 8a           			txa
  30 0cc1 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0cc2 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0cc4 bd d8 0c     			lda \1,x
  51 0cc7 f0 0c        			beq exit
  52                   			
  53 0cc9 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0ccb d0 02        			bne print
  55                   			
  56 0ccd a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0ccf 20 d2 ff     			jsr CHROUT			
  60 0cd2 e8           			inx			
  61 0cd3 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0cd5 4c e2 0c     			jmp end_text		
  36                   						
  37 0cd8 2f 32 20 53  rtxt			.null "@1"
     0cdc 54 41 52 54 
     0ce0 3d 00 
  38                   
  39                   end_text							
  40 0ce2 68           			pla						
  41 0ce3 aa           			tax						
  42 0ce4 68           			pla						
  43                   									
  55                   				#print_int_var \2
  86 0ce5 48           			pha
  87 0ce6 98           			tya
  88 0ce7 48           			pha
  89                   			
  90 0ce8 a5 f8        			lda \1+1
  91 0cea a4 f7        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0cec 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0cef 68           			pla
  96 0cf0 a8           			tay
  97 0cf1 68           			pla
  56                   				#print_char CR
 192 0cf2 48           			pha	
 193                   				
 194 0cf3 a9 0d        			lda #\1
 195 0cf5 20 d2 ff     			jsr CHROUT
 196                   			
 197 0cf8 68           			pla
  57                   				
  58                   				#print_str "/3 start="
  27                   			
  28 0cf9 48           			pha
  29 0cfa 8a           			txa
  30 0cfb 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0cfc a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0cfe bd 12 0d     			lda \1,x
  51 0d01 f0 0c        			beq exit
  52                   			
  53 0d03 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0d05 d0 02        			bne print
  55                   			
  56 0d07 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0d09 20 d2 ff     			jsr CHROUT			
  60 0d0c e8           			inx			
  61 0d0d d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0d0f 4c 1c 0d     			jmp end_text		
  36                   						
  37 0d12 2f 33 20 53  rtxt			.null "@1"
     0d16 54 41 52 54 
     0d1a 3d 00 
  38                   
  39                   end_text							
  40 0d1c 68           			pla						
  41 0d1d aa           			tax						
  42 0d1e 68           			pla						
  43                   									
  59                   				#print_ptr \3
 267                   			
 268 0d1f 48           			pha
 269 0d20 98           			tya
 270 0d21 48           			pha
 271                   			
 272 0d22 a5 b1        			lda \1+1
 273 0d24 a4 b2        			ldy \1+2
 274 0d26 20 cd bd     			jsr LINPRT
 275                   			
 276 0d29 68           			pla
 277 0d2a a8           			tay
 278 0d2b 68           			pla
  60                   				#print_char CR
 192 0d2c 48           			pha	
 193                   				
 194 0d2d a9 0d        			lda #\1
 195 0d2f 20 d2 ff     			jsr CHROUT
 196                   			
 197 0d32 68           			pla
  61                   				
  62                   				#print_str "/4 start="
  27                   			
  28 0d33 48           			pha
  29 0d34 8a           			txa
  30 0d35 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0d36 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0d38 bd 4c 0d     			lda \1,x
  51 0d3b f0 0c        			beq exit
  52                   			
  53 0d3d c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0d3f d0 02        			bne print
  55                   			
  56 0d41 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0d43 20 d2 ff     			jsr CHROUT			
  60 0d46 e8           			inx			
  61 0d47 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0d49 4c 56 0d     			jmp end_text		
  36                   						
  37 0d4c 2f 34 20 53  rtxt			.null "@1"
     0d50 54 41 52 54 
     0d54 3d 00 
  38                   
  39                   end_text							
  40 0d56 68           			pla						
  41 0d57 aa           			tax						
  42 0d58 68           			pla						
  43                   									
  63                   				#print_int_var \4
  86 0d59 48           			pha
  87 0d5a 98           			tya
  88 0d5b 48           			pha
  89                   			
  90 0d5c a5 fa        			lda \1+1
  91 0d5e a4 f9        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0d60 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0d63 68           			pla
  96 0d64 a8           			tay
  97 0d65 68           			pla
  64                   				#print_char CR
 192 0d66 48           			pha	
 193                   				
 194 0d67 a9 0d        			lda #\1
 195 0d69 20 d2 ff     			jsr CHROUT
 196                   			
 197 0d6c 68           			pla
  65                   				
  66                   				#print_str "counter start="
  27                   			
  28 0d6d 48           			pha
  29 0d6e 8a           			txa
  30 0d6f 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0d70 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0d72 bd 86 0d     			lda \1,x
  51 0d75 f0 0c        			beq exit
  52                   			
  53 0d77 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0d79 d0 02        			bne print
  55                   			
  56 0d7b a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0d7d 20 d2 ff     			jsr CHROUT			
  60 0d80 e8           			inx			
  61 0d81 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0d83 4c 95 0d     			jmp end_text		
  36                   						
  37 0d86 43 4f 55 4e  rtxt			.null "@1"
     0d8a 54 45 52 20 
     0d8e 53 54 41 52 
     0d92 54 3d 00 
  38                   
  39                   end_text							
  40 0d95 68           			pla						
  41 0d96 aa           			tax						
  42 0d97 68           			pla						
  43                   									
  67                   				#print_int_var counter
  86 0d98 48           			pha
  87 0d99 98           			tya
  88 0d9a 48           			pha
  89                   			
  90 0d9b a5 b3        			lda \1+1
  91 0d9d a4 b2        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0d9f 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0da2 68           			pla
  96 0da3 a8           			tay
  97 0da4 68           			pla
  68                   				#print_char CR
 192 0da5 48           			pha	
 193                   				
 194 0da6 a9 0d        			lda #\1
 195 0da8 20 d2 ff     			jsr CHROUT
 196                   			
 197 0dab 68           			pla
  69                   				
  70                   				#print_str "/5="
  27                   			
  28 0dac 48           			pha
  29 0dad 8a           			txa
  30 0dae 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0daf a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0db1 bd c5 0d     			lda \1,x
  51 0db4 f0 0c        			beq exit
  52                   			
  53 0db6 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0db8 d0 02        			bne print
  55                   			
  56 0dba a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0dbc 20 d2 ff     			jsr CHROUT			
  60 0dbf e8           			inx			
  61 0dc0 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0dc2 4c c9 0d     			jmp end_text		
  36                   						
  37 0dc5 2f 35 3d 00 
  38                   
  39                   end_text							
  40 0dc9 68           			pla						
  41 0dca aa           			tax						
  42 0dcb 68           			pla						
  43                   									
  71                   				#print_int_var \5
  86 0dcc 48           			pha
  87 0dcd 98           			tya
  88 0dce 48           			pha
  89                   			
  90 0dcf a5 05        			lda \1+1
  91 0dd1 a4 04        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0dd3 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0dd6 68           			pla
  96 0dd7 a8           			tay
  97 0dd8 68           			pla
  72                   				#print_char CR
 192 0dd9 48           			pha	
 193                   				
 194 0dda a9 0d        			lda #\1
 195 0ddc 20 d2 ff     			jsr CHROUT
 196                   			
 197 0ddf 68           			pla
  73                   			;.endif
  74                   			
  75                   			
  76 0de0 a0 00        			ldy #0
  77 0de2 84 b2        			sty counter
  78                   			
  79                   loop			
  80                   			;inc $0400	
  81                   				
  82                   				
  83 0de4 b1 fb        			lda (\1),y
  84 0de6 91 f7        			sta (\2),y
  85                   			
  86 0de8 b1 b0        			lda (\3),y
  87 0dea 91 f9        			sta (\4),y
  88                   			
  89 0dec c8           			iny
  90 0ded f0 16        			beq increment
  91                   			
  92                   			#inc16 counter			
 285                   			;#print_str "inc16"					
 286                   								
 287                   ;			pha					
 288                   ;								
 289                   ;			clc
 290                   ;			lda \1					
 291                   ;			#print_str "inc16:a="					
 292                   ;			#print_a					
 293                   ;			#print_char 13					
 294                   ;			adc #1					
 295                   ;			#print_str "inc16:after inc, a="				
 296                   ;			#print_a				
 297                   ;			#print_char 13				
 298                   ;							
 299                   ;			sta \1					
 300                   ;			lda \2					
 301                   ;			adc #0					
 302                   ;			sta \2					
 303                   ;								
 304                   ;			pla								
 305                   											
 306                   			.ifne DEBUG_MACROS								
 307                   				#print_str "inc16:before="								
 308                   				#print_int \1								
 309                   				#print_char CR								
 310                   			.endif								
 311                   											
 312 0def e6 b2        			inc \1					
 313 0df1 d0 02        			bne done					
 314                   								
 315 0df3 e6 b3        			inc \1+1					
 316                   								
 317                   								
 318                   done								
 319                   			.ifne DEBUG_MACROS			
 320                   				#print_str "inc16:after="			
 321                   				#print_int \1			
 322                   				#print_char CR			
 323                   			.endif			
 324                   						
  93                   			#cmp16const counter,\5
 377                   			.ifne DEBUG_MACROS						
 378                   				#print_str "cmp16:/1="						
 379                   				#print_int \1						
 380                   				#print_str " /2="						
 381                   				#print_int \2						
 382                   				#print_char SPC						
 383                   			.endif						
 384                   									
 385 0df5 18           			clc						
 386                   									
 387 0df6 a5 b2        			lda \1						
 388 0df8 c9 b2        			cmp #<\1					
 389 0dfa d0 07        			bne exit					
 390                   								
 391 0dfc a5 b3        			lda \1+1					
 392 0dfe c9 00        			cmp #>\1					
 393 0e00 d0 01        			bne exit					
 394                   								
 395                   			.ifne DEBUG_MACROS					
 396                   				#print_str "EQUAL!"					
 397                   			.endif					
 398 0e02 38           			sec					
 399                   								
 400                   exit																
 401                   			.ifne DEBUG_MACROS															
 402                   				#print_char CR															
 403                   			.endif															
 404                   																		
  94 0e03 90 df        			bcc loop
  95                   
  96                   increment			
  97                   			;inc $0401			
  98                   						
  99 0e05 e6 fc        			inc \1+1
 100 0e07 e6 f8        			inc \2+1
 101 0e09 e6 b1        			inc \3+1
 102 0e0b e6 fa        			inc \4+1
 103                   ;DEBUG_MACROS .var 1
 104                   check_final						
 105 0e0d a5 b2        			lda counter						
 106 0e0f c5 04        			cmp 4						
 107 0e11 90 d1        			bcc loop ;C set if >=						
 108                   exit
 109                   
 110                   ;DEBUG=1
 111                   			;.ifdef DEBUG
 112                   				#print_str "done!~"
  27                   			
  28 0e13 48           			pha
  29 0e14 8a           			txa
  30 0e15 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0e16 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0e18 bd 2c 0e     			lda \1,x
  51 0e1b f0 0c        			beq exit
  52                   			
  53 0e1d c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0e1f d0 02        			bne print
  55                   			
  56 0e21 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0e23 20 d2 ff     			jsr CHROUT			
  60 0e26 e8           			inx			
  61 0e27 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0e29 4c 33 0e     			jmp end_text		
  36                   						
  37 0e2c 44 4f 4e 45  rtxt			.null "@1"
     0e30 21 7e 00 
  38                   
  39                   end_text							
  40 0e33 68           			pla						
  41 0e34 aa           			tax						
  42 0e35 68           			pla						
  43                   									
 113                   				
 114                   				#print_str "/1 final="
  27                   			
  28 0e36 48           			pha
  29 0e37 8a           			txa
  30 0e38 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0e39 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0e3b bd 4f 0e     			lda \1,x
  51 0e3e f0 0c        			beq exit
  52                   			
  53 0e40 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0e42 d0 02        			bne print
  55                   			
  56 0e44 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0e46 20 d2 ff     			jsr CHROUT			
  60 0e49 e8           			inx			
  61 0e4a d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0e4c 4c 59 0e     			jmp end_text		
  36                   						
  37 0e4f 2f 31 20 46  rtxt			.null "@1"
     0e53 49 4e 41 4c 
     0e57 3d 00 
  38                   
  39                   end_text							
  40 0e59 68           			pla						
  41 0e5a aa           			tax						
  42 0e5b 68           			pla						
  43                   									
 115                   				#print_ptr \1
 267                   			
 268 0e5c 48           			pha
 269 0e5d 98           			tya
 270 0e5e 48           			pha
 271                   			
 272 0e5f a5 fc        			lda \1+1
 273 0e61 a4 fd        			ldy \1+2
 274 0e63 20 cd bd     			jsr LINPRT
 275                   			
 276 0e66 68           			pla
 277 0e67 a8           			tay
 278 0e68 68           			pla
 116                   				#print_char CR
 192 0e69 48           			pha	
 193                   				
 194 0e6a a9 0d        			lda #\1
 195 0e6c 20 d2 ff     			jsr CHROUT
 196                   			
 197 0e6f 68           			pla
 117                   				
 118                   				#print_str "/2 final="
  27                   			
  28 0e70 48           			pha
  29 0e71 8a           			txa
  30 0e72 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0e73 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0e75 bd 89 0e     			lda \1,x
  51 0e78 f0 0c        			beq exit
  52                   			
  53 0e7a c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0e7c d0 02        			bne print
  55                   			
  56 0e7e a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0e80 20 d2 ff     			jsr CHROUT			
  60 0e83 e8           			inx			
  61 0e84 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0e86 4c 93 0e     			jmp end_text		
  36                   						
  37 0e89 2f 32 20 46  rtxt			.null "@1"
     0e8d 49 4e 41 4c 
     0e91 3d 00 
  38                   
  39                   end_text							
  40 0e93 68           			pla						
  41 0e94 aa           			tax						
  42 0e95 68           			pla						
  43                   									
 119                   				#print_int_var \2
  86 0e96 48           			pha
  87 0e97 98           			tya
  88 0e98 48           			pha
  89                   			
  90 0e99 a5 f8        			lda \1+1
  91 0e9b a4 f7        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0e9d 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0ea0 68           			pla
  96 0ea1 a8           			tay
  97 0ea2 68           			pla
 120                   				#print_char CR
 192 0ea3 48           			pha	
 193                   				
 194 0ea4 a9 0d        			lda #\1
 195 0ea6 20 d2 ff     			jsr CHROUT
 196                   			
 197 0ea9 68           			pla
 121                   				
 122                   				#print_str "/3 final="
  27                   			
  28 0eaa 48           			pha
  29 0eab 8a           			txa
  30 0eac 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0ead a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0eaf bd c3 0e     			lda \1,x
  51 0eb2 f0 0c        			beq exit
  52                   			
  53 0eb4 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0eb6 d0 02        			bne print
  55                   			
  56 0eb8 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0eba 20 d2 ff     			jsr CHROUT			
  60 0ebd e8           			inx			
  61 0ebe d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0ec0 4c cd 0e     			jmp end_text		
  36                   						
  37 0ec3 2f 33 20 46  rtxt			.null "@1"
     0ec7 49 4e 41 4c 
     0ecb 3d 00 
  38                   
  39                   end_text							
  40 0ecd 68           			pla						
  41 0ece aa           			tax						
  42 0ecf 68           			pla						
  43                   									
 123                   				#print_ptr \3
 267                   			
 268 0ed0 48           			pha
 269 0ed1 98           			tya
 270 0ed2 48           			pha
 271                   			
 272 0ed3 a5 b1        			lda \1+1
 273 0ed5 a4 b2        			ldy \1+2
 274 0ed7 20 cd bd     			jsr LINPRT
 275                   			
 276 0eda 68           			pla
 277 0edb a8           			tay
 278 0edc 68           			pla
 124                   				#print_char CR
 192 0edd 48           			pha	
 193                   				
 194 0ede a9 0d        			lda #\1
 195 0ee0 20 d2 ff     			jsr CHROUT
 196                   			
 197 0ee3 68           			pla
 125                   				
 126                   				#print_str "/4 final="
  27                   			
  28 0ee4 48           			pha
  29 0ee5 8a           			txa
  30 0ee6 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0ee7 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0ee9 bd fd 0e     			lda \1,x
  51 0eec f0 0c        			beq exit
  52                   			
  53 0eee c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0ef0 d0 02        			bne print
  55                   			
  56 0ef2 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0ef4 20 d2 ff     			jsr CHROUT			
  60 0ef7 e8           			inx			
  61 0ef8 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0efa 4c 07 0f     			jmp end_text		
  36                   						
  37 0efd 2f 34 20 46  rtxt			.null "@1"
     0f01 49 4e 41 4c 
     0f05 3d 00 
  38                   
  39                   end_text							
  40 0f07 68           			pla						
  41 0f08 aa           			tax						
  42 0f09 68           			pla						
  43                   									
 127                   				#print_int_var \4
  86 0f0a 48           			pha
  87 0f0b 98           			tya
  88 0f0c 48           			pha
  89                   			
  90 0f0d a5 fa        			lda \1+1
  91 0f0f a4 f9        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0f11 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0f14 68           			pla
  96 0f15 a8           			tay
  97 0f16 68           			pla
 128                   				#print_char CR
 192 0f17 48           			pha	
 193                   				
 194 0f18 a9 0d        			lda #\1
 195 0f1a 20 d2 ff     			jsr CHROUT
 196                   			
 197 0f1d 68           			pla
 129                   				
 130                   				#print_str "counter final="
  27                   			
  28 0f1e 48           			pha
  29 0f1f 8a           			txa
  30 0f20 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0f21 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0f23 bd 37 0f     			lda \1,x
  51 0f26 f0 0c        			beq exit
  52                   			
  53 0f28 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0f2a d0 02        			bne print
  55                   			
  56 0f2c a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0f2e 20 d2 ff     			jsr CHROUT			
  60 0f31 e8           			inx			
  61 0f32 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0f34 4c 46 0f     			jmp end_text		
  36                   						
  37 0f37 43 4f 55 4e  rtxt			.null "@1"
     0f3b 54 45 52 20 
     0f3f 46 49 4e 41 
     0f43 4c 3d 00 
  38                   
  39                   end_text							
  40 0f46 68           			pla						
  41 0f47 aa           			tax						
  42 0f48 68           			pla						
  43                   									
 131                   				#print_int_var counter
  86 0f49 48           			pha
  87 0f4a 98           			tya
  88 0f4b 48           			pha
  89                   			
  90 0f4c a5 b3        			lda \1+1
  91 0f4e a4 b2        			ldy \1
  92                   			;jsr LINPRT
  93                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0f50 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  94                   			
  95 0f53 68           			pla
  96 0f54 a8           			tay
  97 0f55 68           			pla
 132                   				#print_char CR
 192 0f56 48           			pha	
 193                   				
 194 0f57 a9 0d        			lda #\1
 195 0f59 20 d2 ff     			jsr CHROUT
 196                   			
 197 0f5c 68           			pla
 133                   			;.endif
 134                   			
 135                   			
 198                   			
 199 0f5d 60           			rts
 200                   						 
 201                   .bend 
 202                   
 203                   
 204                   ;			
 205                   ;	Checks to see if IRQ is active. Sets carry accordingly.			
 206                   ;			
 207                   check_active				
 208                   .block				
 209 0f5e ad 15 03     			lda $315
 210 0f61 c9 10        			cmp #>main
 211 0f63 d0 0b        			bne not_active
 212 0f65 ad 14 03     			lda $314
 213 0f68 c9 b1        			cmp #<main
 214 0f6a d0 04        			bne not_active
 215                   			
 216 0f6c 38           			sec
 217 0f6d 4c 74 0f     			jmp exit
 218                   			
 219 0f70 18           not_active	clc			
 220 0f71 4c 74 0f     			jmp exit			
 221                   						
 222 0f74 60           exit		rts						
 223                   .bend						
 224                   
 225                   ;
 226                   ;	set the irq vector to execute our code
 227                   ;		before running the normal C64 IRQ vector
 228                   ;
 229                   init 
 230                   ;.block
 231 0f75 a9 17        			lda #$17		; set upper-lower character set
 232 0f77 8d 18 d0     			sta $d018
 233                   			#print_char 8	; ...and disable switching 
 192 0f7a 48           			pha	
 193                   				
 194 0f7b a9 08        			lda #\1
 195 0f7d 20 d2 ff     			jsr CHROUT
 196                   			
 197 0f80 68           			pla
 234                   			
 235                   			
 236 0f81 20 5e 0f     			jsr check_active
 237 0f84 90 03        			bcc activate
 238 0f86 4c 12 10     			jmp deactivate
 239                   			
 240                   activate			
 241 0f89 78           			sei
 242                   			
 243 0f8a a9 10        			lda #>main
 244 0f8c 8d 15 03     			sta $315
 245 0f8f a9 b1        			lda #<main
 246 0f91 8d 14 03     			sta $0314
 247                   			
 248 0f94 ad 20 d0     			lda $d020
 249 0f97 8d b0 10     			sta old_bgcolor
 250                   			
 251 0f9a 58           			cli
 252                   			
 253 0f9b 20 3c 08     			jsr store_screens
 254                   			
 255                   			#print_str "To deactivate, run again"
  27                   			
  28 0f9e 48           			pha
  29 0f9f 8a           			txa
  30 0fa0 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0fa1 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0fa3 bd b7 0f     			lda \1,x
  51 0fa6 f0 0c        			beq exit
  52                   			
  53 0fa8 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0faa d0 02        			bne print
  55                   			
  56 0fac a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0fae 20 d2 ff     			jsr CHROUT			
  60 0fb1 e8           			inx			
  61 0fb2 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0fb4 4c d0 0f     			jmp end_text		
  36                   						
  37 0fb7 d4 4f 20 44  rtxt			.null "@1"
     0fbb 45 41 43 54 
     0fbf 49 56 41 54 
     0fc3 45 2c 20 52 
     0fc7 55 4e 20 41 
     0fcb 47 41 49 4e 
     0fcf 00 
  38                   
  39                   end_text							
  40 0fd0 68           			pla						
  41 0fd1 aa           			tax						
  42 0fd2 68           			pla						
  43                   									
 256                   			#print_char CR
 192 0fd3 48           			pha	
 193                   				
 194 0fd4 a9 0d        			lda #\1
 195 0fd6 20 d2 ff     			jsr CHROUT
 196                   			
 197 0fd9 68           			pla
 257                   			
 258                   			#print_int code_length
  71 0fda 48           			pha
  72 0fdb 98           			tya
  73 0fdc 48           			pha
  74                   			
  75 0fdd a9 10        			lda #>\1
  76 0fdf a0 83        			ldy #<\1
  77                   			;jsr LINPRT
  78                   			#print_ay			
 180                   			push_axy
 181                   			
 182 0fe1 20 cd bd     			jsr LINPRT
 183                   			;jsr GIVAYF
 184                   			;jsr FOUT
 185                   			;jsr STROUT
 186                   			
 187                   			pull_axy
  79                   			
  80 0fe4 68           			pla
  81 0fe5 a8           			tay
  82 0fe6 68           			pla
 259                   			#print_str " bytes total~"
  27                   			
  28 0fe7 48           			pha
  29 0fe8 8a           			txa
  30 0fe9 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 0fea a2 00        			ldx #0
  48                   			
  49                   loop			
  50 0fec bd 00 10     			lda \1,x
  51 0fef f0 0c        			beq exit
  52                   			
  53 0ff1 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 0ff3 d0 02        			bne print
  55                   			
  56 0ff5 a9 0d        			lda #CR
  57                   			
  58                   print			
  59 0ff7 20 d2 ff     			jsr CHROUT			
  60 0ffa e8           			inx			
  61 0ffb d0 ef        			bne loop			
  33                   			
  34                   exit
  35 0ffd 4c 0e 10     			jmp end_text		
  36                   						
  37 1000 20 42 59 54  rtxt			.null "@1"
     1004 45 53 20 54 
     1008 4f 54 41 4c 
     100c 7e 00 
  38                   
  39                   end_text							
  40 100e 68           			pla						
  41 100f aa           			tax						
  42 1010 68           			pla						
  43                   									
 260                   			
 261                   			
 262 1011 60           			rts
 263                   ;.bend
 264                   
 265                   
 266                   ;
 267                   ;	restore the IRQ vector to the system default, assuming 
 268                   ;		that's it's been previously set. Otherwise, complain.
 269                   ;
 270                   deactivate		
 271                   .block		
 272 1012 20 5e 0f     			jsr check_active		
 273 1015 b0 03        			bcs deactivate2	
 274                   				
 275 1017 4c 89 0f     			jmp activate	
 276                   		
 277                   
 278                   deactivate2			
 279 101a 78           			sei
 280                   			
 281 101b a9 31        			lda #$31		
 282 101d 8d 14 03     			sta $0314		
 283 1020 a9 ea        			lda #$EA		
 284 1022 8d 15 03     			sta $0315		
 285                   					
 286 1025 58           			cli		
 287                   
 288 1026 ad b0 10     			lda old_bgcolor
 289 1029 8d 20 d0     			sta $d020
 290                   			
 291 102c 20 cc 0b     			jsr restore_screens
 292                   			
 293                   			#print_str "Deactivated!"
  27                   			
  28 102f 48           			pha
  29 1030 8a           			txa
  30 1031 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 1032 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 1034 bd 48 10     			lda \1,x
  51 1037 f0 0c        			beq exit
  52                   			
  53 1039 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 103b d0 02        			bne print
  55                   			
  56 103d a9 0d        			lda #CR
  57                   			
  58                   print			
  59 103f 20 d2 ff     			jsr CHROUT			
  60 1042 e8           			inx			
  61 1043 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 1045 4c 55 10     			jmp end_text		
  36                   						
  37 1048 c4 45 41 43  rtxt			.null "@1"
     104c 54 49 56 41 
     1050 54 45 44 21 
     1054 00 
  38                   
  39                   end_text							
  40 1055 68           			pla						
  41 1056 aa           			tax						
  42 1057 68           			pla						
  43                   									
 294                   			#print_char CR
 192 1058 48           			pha	
 193                   				
 194 1059 a9 0d        			lda #\1
 195 105b 20 d2 ff     			jsr CHROUT
 196                   			
 197 105e 68           			pla
 295                   			#print_str "Run again to re-activate"
  27                   			
  28 105f 48           			pha
  29 1060 8a           			txa
  30 1061 48           			pha
  31                   			
  32                   			#print_str_addr rtxt
  47 1062 a2 00        			ldx #0
  48                   			
  49                   loop			
  50 1064 bd 78 10     			lda \1,x
  51 1067 f0 0c        			beq exit
  52                   			
  53 1069 c9 7e        			cmp #126		;'~'in ASCII, PI-symbol in PETSCII
  54 106b d0 02        			bne print
  55                   			
  56 106d a9 0d        			lda #CR
  57                   			
  58                   print			
  59 106f 20 d2 ff     			jsr CHROUT			
  60 1072 e8           			inx			
  61 1073 d0 ef        			bne loop			
  33                   			
  34                   exit
  35 1075 4c 91 10     			jmp end_text		
  36                   						
  37 1078 d2 55 4e 20  rtxt			.null "@1"
     107c 41 47 41 49 
     1080 4e 20 54 4f 
     1084 20 52 45 2d 
     1088 41 43 54 49 
     108c 56 41 54 45 
     1090 00 
  38                   
  39                   end_text							
  40 1091 68           			pla						
  41 1092 aa           			tax						
  42 1093 68           			pla						
  43                   									
 296                   			#print_char CR
 192 1094 48           			pha	
 193                   				
 194 1095 a9 0d        			lda #\1
 195 1097 20 d2 ff     			jsr CHROUT
 196                   			
 197 109a 68           			pla
 297                   					
 298 109b 18           			clc		
 299 109c 90 00        			bcc exit	
 300                   exit 	
 301 109e 60           			rts
 302                   .bend
 303                   
 304                   ;
 305                   ; check for 'commodore-c' key pressed,
 306                   ;	OUT:c=1 if pressed, 0 if not
 307                   ;
 308                   check_key
 309                   .block
 310 109f ad 8d 02     			lda SHIFT_KEYS
 311 10a2 29 02        			and #(KEY_COMM)
 312 10a4 f0 08        			beq ck1
 313                   			
 314 10a6 a5 cb        			lda $cb			
 315 10a8 c9 14        			cmp #$14		;'c'			
 316                   						
 317 10aa d0 02        			bne ck1			
 318                   						
 319 10ac 38           			sec
 320 10ad 60           			rts
 321                   			
 322 10ae 18           ck1			clc
 323 10af 60           			rts
 324                   .bend
 325                   
 326 10b0 00           old_bgcolor	.byte 0					
 327                   
 328                   
 329                   ;				
 330                   ;	main routine, which runs every IRQ period (60 times/sec				
 331                   ;		for NTSC machines). 				
 332                   ;					
 333                   ;	at the moment, just sets the border color to black				
 334                   ;		to remind the user that it's active, and				
 335                   ;		clears the screen when the user hits commodore-c				
 336                   ;				
 337                   				
 338                   main	
 339                   			
 340 10b1 a9 00        			lda #0
 341 10b3 8d 20 d0     			sta $d020	; set border color to black when 
 342                   						; 	custom IRQ is active		
 343                   			
 344 10b6 20 9f 10     			jsr check_key			
 345 10b9 90 03        			bcc exit			
 346                   						
 347                   						
 348 10bb 20 44 e5     			jsr CLR_SCREEN
 349                   		
 350                   		
 351                   exit
 352 10be 4c 31 ea     			jmp $EA31	;continue IRQ servicing logic
 353 10c1 60           			rts
 354                   
 355                   ;count			.byte $ff
 356                   								
 357                   
 358                   
 359                   
 360                   screen_buffer
 361                   *=*+1000
 362                   color_buffer
 363                   *=*+1000
 364                   
 365 1892 ea           			nop
 366                   			
 367                   code_end
 368                   
 369                   code_length=code_end-code_begin
 370                   
